{
  "format_version": "stackexchange-thread",
  "url": "https://stackoverflow.com/questions/652788/what-is-the-worst-real-world-macros-pre-processor-abuse-youve-ever-come-across/653028#653028",
  "id": 652788,
  "title": "What is the worst real-world macros/pre-processor abuse you&#39;ve ever come across?",
  "views": 135388,
  "asked": "2009-03-17T01:57:42",
  "modified": "2013-05-02 09:34:07Z",
  "tags": [
    "c++",
    "c",
    "macros",
    "preprocessor"
  ],
  "posts": [
    {
      "id": 652788,
      "rating": 176,
      "checkmark": false,
      "bounty": 0,
      "content": "<div>            <aside class=\"s-notice s-notice__info post-notice js-post-notice mb16\" role=\"status\">        <div class=\"d-flex fd-column fw-nowrap\">            <div class=\"d-flex fw-nowrap\">                    <div class=\"flex--item mr8\">                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4m3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0z\"/></svg>                    </div>                <div class=\"flex--item wmn0 fl1 lh-lg\">                    <div class=\"flex--item fl1 lh-lg\">                            <div>                                <b>Locked</b>. This question and its answers are <a href=\"/help/locked-posts\">locked</a> because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.                                                            </div>                    </div>                </div>            </div>        </div></aside>    </div><p>What is the <em>worst</em> <strong>real-world</strong> macros/pre-processor abuse you've ever come across (please no contrived IOCCC answers *haha*)?</p><p>Please add a short snippet or story if it is really entertaining. The goal is to teach something instead of always telling people \"never use macros\".</p><hr><p>p.s.: I've used macros before... but usually I get rid of them eventually when I have a \"real\" solution (even if the real solution is inlined so it becomes similar to a macro).</p><hr><p><strong>Bonus:</strong> Give an example where the macro was really was better than a not-macro solution.</p><p><strong>Related question:</strong> <a href=\"https://stackoverflow.com/questions/96196/when-are-c-macros-beneficial\">When are C++ macros beneficial?</a> </p>",
      "edited": "2017-05-23 12:34:45Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652788/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466301,
          "score": 0,
          "content": "+1 for bringing attention to the rampant abuse I&#39;ve suffered at the hands of Macros.",
          "date": "2009-03-17 03:36:18Z",
          "user": "i_am_jorf",
          "user_link": "https://stackoverflow.com/users/74815/i-am-jorf",
          "reputation": 54430
        },
        {
          "id": 467072,
          "score": 37,
          "content": "#define true false //happy debugging :)",
          "date": "2009-03-17 11:36:38Z",
          "user": "n0rd",
          "user_link": "https://stackoverflow.com/users/31782/n0rd",
          "reputation": 12505
        },
        {
          "id": 475681,
          "score": 0,
          "content": "Community wiki means that nobody will gain (or lose) reputation from up/down votes on this question or its answers. Many people view questions like this as cheap and easy ways to gain reputation, so if you mark it as community wiki, people are less likely to get all bent out of shape and close it.",
          "date": "2009-03-19 13:15:29Z",
          "user": "Graeme Perrow",
          "user_link": "https://stackoverflow.com/users/1821/graeme-perrow",
          "reputation": 57048
        },
        {
          "id": 475847,
          "score": 2,
          "content": "&quot;people are likely to get all bent out of shape and close it&quot;:  Are you implying that you don&#39;t want any humorous/funny content on stack overflow?",
          "date": "2009-03-19 14:03:59Z",
          "user": "Trevor Boyd Smith",
          "user_link": "https://stackoverflow.com/users/52074/trevor-boyd-smith",
          "reputation": 19041
        },
        {
          "id": 477326,
          "score": 0,
          "content": "I didn&#39;t say anything about what <i>I</i> want or don&#39;t want. But questions like this that are not marked CW are frequently closed quickly. If they&#39;re marked CW they tend to survive a little longer.",
          "date": "2009-03-19 19:59:06Z",
          "user": "Graeme Perrow",
          "user_link": "https://stackoverflow.com/users/1821/graeme-perrow",
          "reputation": 57048
        },
        {
          "id": 1114020,
          "score": 0,
          "content": "This one isn&#39;t real world, but i think it deserves a (dis)honorable mention: <a href=\"http://99-bottles-of-beer.net/language-c-c++-preprocessor-115.html\" rel=\"nofollow noreferrer\">99-bottles-of-beer.net/language-c-c++-preprocessor-115.html</a>",
          "date": "2009-08-16 13:52:14Z",
          "user": "Grant Peters",
          "user_link": "https://stackoverflow.com/users/68241/grant-peters",
          "reputation": 7801
        },
        {
          "id": 2562630,
          "score": 2,
          "content": "Just a quick point, the pre-processor is part of the language and therefore not evil/wrong to use, just like anything else.",
          "date": "2010-04-01 10:31:17Z",
          "user": "Mr. Boy",
          "user_link": "https://stackoverflow.com/users/197229/mr-boy",
          "reputation": 63250
        },
        {
          "id": 3948563,
          "score": 0,
          "content": "You mean IOCCC is not part of the <i>real world</i>?",
          "date": "2010-09-17 16:30:03Z",
          "user": "Timwi",
          "user_link": "https://stackoverflow.com/users/33225/timwi",
          "reputation": 66402
        }
      ]
    },
    {
      "id": 652945,
      "rating": 409,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>From memory, it looked something like this:</p><pre><code>#define RETURN(result) return (result);}int myfunction1(args) {    int x = 0;    // do something    RETURN(x)int myfunction2(args) {    int y = 0;    // do something    RETURN(y)int myfunction3(args) {    int z = 0;    // do something    RETURN(z)</code></pre><p>Yes that's right, no closing braces in any of the functions.  Syntax highlighting was a mess, so he used vi to edit (not vim, it has syntax coloring!)</p><p>He was a Russian programmer who had mostly worked in assembly language.  He was fanatical about saving as many bytes as possible because he had previously worked on systems with very limited memory.  \"It was for satellite.  Only very few byte, so we use each byte over for many things.\"  (bit fiddling, reusing machine instruction bytes for their numeric values)  When I tried to find out what kinds of satellites, I was only able to get \"Orbiting satellite.  For making to orbit.\"</p><p>He had two other quirks: A convex mirror mounted above his monitor \"For knowing who is watching\", and an occasional sudden exit from his chair to do a quick ten pushups.  He explained this last one as \"Compiler found error in code. This is punishment\".  </p>",
      "edited": "2010-05-24 20:05:54Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652945/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466382,
          "score": 1,
          "content": "I don&#39;t see how you would get any benefit from that macro; the compiler&#39;s just going to put them characters back in, and unless he&#39;s writing some kind of useful quine, code size wouldn&#39;t matter.",
          "date": "2009-03-17 04:12:34Z",
          "user": "Ryan Fox",
          "user_link": "https://stackoverflow.com/users/55/ryan-fox",
          "reputation": 10189
        },
        {
          "id": 466386,
          "score": 3,
          "content": "Are you missing the keyword &#39;return&#39; in the expansion?  I think I&#39;d expect this horror to be &#39;#define RETURN(x) return(x);}&#39;.",
          "date": "2009-03-17 04:15:43Z",
          "user": "Jonathan Leffler",
          "user_link": "https://stackoverflow.com/users/15168/jonathan-leffler",
          "reputation": 749241
        },
        {
          "id": 466563,
          "score": 87,
          "content": "&quot;Compiler found error in code. This is punishment&quot;. !! Company found you ... punishment to the fellow employees !",
          "date": "2009-03-17 06:40:53Z",
          "user": "Learning",
          "user_link": "https://stackoverflow.com/users/18275/learning",
          "reputation": 8165
        },
        {
          "id": 466692,
          "score": 227,
          "content": "In Soviet Russia, program compiles YOU!",
          "date": "2009-03-17 08:03:32Z",
          "user": "Crashworks",
          "user_link": "https://stackoverflow.com/users/53543/crashworks",
          "reputation": 41216
        },
        {
          "id": 466987,
          "score": 2,
          "content": "Bu- Wai- Who-. That is peverse.",
          "date": "2009-03-17 10:55:06Z",
          "user": "Bernard",
          "user_link": "https://stackoverflow.com/users/61/bernard",
          "reputation": 45508
        },
        {
          "id": 466997,
          "score": 4,
          "content": "Was his name Pitr by any chance?",
          "date": "2009-03-17 10:58:44Z",
          "user": "Adrian Grigore",
          "user_link": "https://stackoverflow.com/users/59301/adrian-grigore",
          "reputation": 33270
        },
        {
          "id": 475667,
          "score": 53,
          "content": "When I read about the compiler error &quot;punishment&quot;, the first thing I thought of was &quot;Dobby had to iron his hands&quot;.",
          "date": "2009-03-19 13:09:39Z",
          "user": "Graeme Perrow",
          "user_link": "https://stackoverflow.com/users/1821/graeme-perrow",
          "reputation": 57048
        },
        {
          "id": 750381,
          "score": 1,
          "content": "I think this is worth an edit... the define statement isn&#39;t correct. Other than that, pure joy!",
          "date": "2009-06-02 22:06:57Z",
          "user": "jpinto3912",
          "user_link": "https://stackoverflow.com/users/11567/jpinto3912",
          "reputation": 1455
        },
        {
          "id": 856839,
          "score": 1,
          "content": "In case someone things that this was one lone crazy programmer, I have also seen a very similar thing done for return statements and braces.  Even worse, however, the macros were not named such that it was obvious there was actually a return that occurred!",
          "date": "2009-06-25 18:54:03Z",
          "user": "iammichael",
          "user_link": "https://stackoverflow.com/users/43367/iammichael",
          "reputation": 9717
        },
        {
          "id": 857167,
          "score": 124,
          "content": "I think programmers (myself included) would be a lot more fit if we all did 10 pushups every time a compiler found an error in our code. This might also reduce the occurrence of testing by compilation.",
          "date": "2009-06-25 19:52:06Z",
          "user": "MikeyB",
          "user_link": "https://stackoverflow.com/users/93180/mikeyb",
          "reputation": 3344
        },
        {
          "id": 857201,
          "score": 1,
          "content": "What would be a good punishment exercise for breaking the build on a CI server? What about all of us doing TDD, what should we do when we get a red bar? :D",
          "date": "2009-06-25 19:58:49Z",
          "user": "Esko Luontola",
          "user_link": "https://stackoverflow.com/users/62130/esko-luontola",
          "reputation": 73545
        },
        {
          "id": 1056312,
          "score": 2,
          "content": "Awesome. I&#39;ve met Russian programmers like that.",
          "date": "2009-08-05 01:05:12Z",
          "user": "hughdbrown",
          "user_link": "https://stackoverflow.com/users/10293/hughdbrown",
          "reputation": 48775
        },
        {
          "id": 1071083,
          "score": 5,
          "content": "That guy sounds awesome. But yeah, I don&#39;t see how this is supposed to improve code size.",
          "date": "2009-08-07 13:16:12Z",
          "user": "Stack Overflow is garbage",
          "user_link": "https://stackoverflow.com/users/33213/stack-overflow-is-garbage",
          "reputation": 246973
        },
        {
          "id": 1291698,
          "score": 3,
          "content": "@MikeyB, I agree about the fitness, but at the same time, I just <i>love</i> &quot;testing by compilation.&quot;  Why should we do what machines can do better?",
          "date": "2009-09-18 16:51:48Z",
          "user": "harpo",
          "user_link": "https://stackoverflow.com/users/4525/harpo",
          "reputation": 42978
        },
        {
          "id": 1291720,
          "score": 3,
          "content": "My eyes! The goggles do nothing!",
          "date": "2009-09-18 16:56:23Z",
          "user": "BIBD",
          "user_link": "https://stackoverflow.com/users/685/bibd",
          "reputation": 15345
        },
        {
          "id": 1302161,
          "score": 0,
          "content": "Of course, I can&#39;t help but think he would have saved just as many characters if he had just removed the parenthesis ()&#39;s from around the return values; which are of course, not necessary in C. :-D",
          "date": "2009-09-21 14:16:11Z",
          "user": "BIBD",
          "user_link": "https://stackoverflow.com/users/685/bibd",
          "reputation": 15345
        },
        {
          "id": 2046533,
          "score": 4,
          "content": "I can assure you, that person wasn&#39;t a typical Russian programmer. We <i>REAL</i> Russian programmers tend to punish ourselves with kettlebell exercises and (occassionally) with horseshoe bending (though it&#39;s considered more of an Architect thing) :))",
          "date": "2010-01-21 17:13:54Z",
          "user": "mlvljr",
          "user_link": "https://stackoverflow.com/users/110118/mlvljr",
          "reputation": 4152
        },
        {
          "id": 2211925,
          "score": 3,
          "content": "@mlvljr: Whimp! Anyone can bend a horseshoe, us Irish programmers STRAIGHTEN horseshoes!",
          "date": "2010-02-12 15:58:06Z",
          "user": "Binary Worrier",
          "user_link": "https://stackoverflow.com/users/18797/binary-worrier",
          "reputation": 51591
        },
        {
          "id": 2212647,
          "score": 0,
          "content": "@Binary Worrier: It makes one worry :)",
          "date": "2010-02-12 17:19:36Z",
          "user": "mlvljr",
          "user_link": "https://stackoverflow.com/users/110118/mlvljr",
          "reputation": 4152
        },
        {
          "id": 2994221,
          "score": 1,
          "content": "HAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHA ! Can&#39;t stop laughing, reading again and again and it&#39;s just so similar to a type of Russian friends I have!",
          "date": "2010-05-30 15:55:49Z",
          "user": "Poni",
          "user_link": "https://stackoverflow.com/users/286260/poni",
          "reputation": 11217
        },
        {
          "id": 7511084,
          "score": 0,
          "content": "Really, you made that up. C&#39;mon! LOL",
          "date": "2011-06-19 22:47:26Z",
          "user": "Vinicius Kamakura",
          "user_link": "https://stackoverflow.com/users/594267/vinicius-kamakura",
          "reputation": 7763
        },
        {
          "id": 12960785,
          "score": 0,
          "content": "I&#39;m probably late but... &quot;:syntax off&quot; turns Syntax Highlighting Off in VIM.",
          "date": "2012-04-11 22:01:41Z",
          "user": "dsocolobsky",
          "user_link": "https://stackoverflow.com/users/910584/dsocolobsky",
          "reputation": 273
        }
      ]
    },
    {
      "id": 652864,
      "rating": 274,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>My worst:</p><pre><code>#define InterlockedIncrement(x) (x)++#define InterlockedDecrement(x) (x)--</code></pre><p>I spent two days of my life tracking down some multi-threaded COM ref-counting issue because some idiot put this in a header file.  I won't mention the company I worked for at the time.  </p><p>The moral of this story?  If you don't understand something, read the documentation and learn about it.  Don't just make it go away.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/652864/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 02:38:07Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466586,
          "score": 0,
          "content": "I&#39;ve done this for testing! But atleast it was conditional on something like <i>TESTING</i>",
          "date": "2009-03-17 06:58:21Z",
          "user": "Preet Sangha",
          "user_link": "https://stackoverflow.com/users/30225/preet-sangha",
          "reputation": 65348
        },
        {
          "id": 469590,
          "score": 146,
          "content": "@Joshua: If you run this code in a multithreaded environment, you just might unintentionally do that",
          "date": "2009-03-17 21:27:54Z",
          "user": "1800 INFORMATION",
          "user_link": "https://stackoverflow.com/users/3146/1800-information",
          "reputation": 134491
        },
        {
          "id": 856994,
          "score": 11,
          "content": "&quot;If you don&#39;t understand something, read the documentation and learn about it. Don&#39;t just make it go away.&quot; - AMEN!",
          "date": "2009-06-25 19:22:42Z",
          "user": "Paul Alexander",
          "user_link": "https://stackoverflow.com/users/76456/paul-alexander",
          "reputation": 32307
        },
        {
          "id": 857135,
          "score": 2,
          "content": "@1800 Information: I think you&#39;d just lose votes, which is why I can&#39;t give you one ;p",
          "date": "2009-06-25 19:47:37Z",
          "user": "wkf",
          "user_link": "https://stackoverflow.com/users/102622/wkf",
          "reputation": 842
        },
        {
          "id": 1298886,
          "score": 5,
          "content": "Forgive me as a non-C++ programmer: Is the main problem here that a threadsafe function is converted into a non-threadsafe one? Or that InterlockedIncrement expects a pointer, so now you&#39;ll increase the pointer instead of what it&#39;s pointing at? Or both?",
          "date": "2009-09-20 20:52:52Z",
          "user": "Tim Pietzcker",
          "user_link": "https://stackoverflow.com/users/20670/tim-pietzcker",
          "reputation": 334854
        },
        {
          "id": 1298929,
          "score": 38,
          "content": "The problem is that InterlockedIncrement is <i>normally</i> an atomic function defined in the Windows API. So when people call InterlockedIncrement, they expect to call into a function that is guaranteed to be executed atomically. Instead, someone defined a macro with the same name, which evaluates to a plain, non-atomic increment",
          "date": "2009-09-20 21:08:14Z",
          "user": "Stack Overflow is garbage",
          "user_link": "https://stackoverflow.com/users/33213/stack-overflow-is-garbage",
          "reputation": 246973
        },
        {
          "id": 1331904,
          "score": 1,
          "content": "&quot;If you run this code in a multithreaded environment, you just might unintentionally do that &quot; thats not true: you can only miss an update -&gt; less votes than expected ;-)",
          "date": "2009-09-26 12:50:06Z",
          "user": "usr",
          "user_link": "https://stackoverflow.com/users/122718/usr",
          "reputation": 170741
        }
      ]
    },
    {
      "id": 652802,
      "rating": 166,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define ever (;;)for ever {    ...}</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/652802/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 02:04:27Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466156,
          "score": 52,
          "content": "I prefer &lt;#define forever for(;;)&gt; so you can write &lt;forever {...}&gt;",
          "date": "2009-03-17 02:16:44Z",
          "user": "paxdiablo",
          "user_link": "https://stackoverflow.com/users/14860/paxdiablo",
          "reputation": 876475
        },
        {
          "id": 466159,
          "score": 0,
          "content": "someone I went to school with lost marks for the EVER thing... he was choked as it was in the text book :-)",
          "date": "2009-03-17 02:17:43Z",
          "user": "TofuBeer",
          "user_link": "https://stackoverflow.com/users/65868/tofubeer",
          "reputation": 61412
        },
        {
          "id": 466187,
          "score": 6,
          "content": "Isn&#39;t Pax&#39;s suggestion straight from K&amp;R?  Still, not worth the effort, I&#39;d say.",
          "date": "2009-03-17 02:30:26Z",
          "user": "Jon Ericson",
          "user_link": "https://stackoverflow.com/users/1438/jon-ericson",
          "reputation": 21375
        },
        {
          "id": 1681394,
          "score": 0,
          "content": "That&#39;s actually not bad at all. I&#39;m not using <code>for (;;)</code> idiom, otherwise I&#39;d immediately add this macro to my code.",
          "date": "2009-11-25 00:00:00Z",
          "user": "AnT stands with Russia",
          "user_link": "https://stackoverflow.com/users/187690/ant-stands-with-russia",
          "reputation": 318827
        },
        {
          "id": 3587995,
          "score": 1,
          "content": "@hayalci: In emacs lisp (and some common lisp implementations) you could to <code>(defmacro ever ())</code> and then <code>(require &#39;cl (ever))</code>",
          "date": "2010-08-09 18:45:59Z",
          "user": "Joe D",
          "user_link": "https://stackoverflow.com/users/292979/joe-d",
          "reputation": 2953
        }
      ]
    },
    {
      "id": 653028,
      "rating": 144,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#include &lt;iostream&gt;#define System S s;s#define public#define static#define void int#define main(x) main()struct F{void println(char* s){std::cout &lt;&lt; s &lt;&lt; std::endl;}};struct S{F out;};public static void main(String[] args) {  System.out.println(\"Hello World!\");}</code></pre><p>Challenge: Can anyone do it with fewer defines and structs? ;-)</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653028/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 04:32:05Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466706,
          "score": 19,
          "content": "you just wrote a java-to-c converter! horray!",
          "date": "2009-03-17 08:10:49Z",
          "user": "Andreas Petersson",
          "user_link": "https://stackoverflow.com/users/16542/andreas-petersson",
          "reputation": 16428
        },
        {
          "id": 471728,
          "score": 25,
          "content": "Reported as &quot;offensive.&quot; (I kid!)",
          "date": "2009-03-18 14:00:01Z",
          "user": "",
          "user_link": null,
          "reputation": 0
        },
        {
          "id": 622242,
          "score": 40,
          "content": "That is either hideously beautiful or beautifully hideous.",
          "date": "2009-05-01 18:37:56Z",
          "user": "Chris Lutz",
          "user_link": "https://stackoverflow.com/users/60777/chris-lutz",
          "reputation": 74959
        },
        {
          "id": 856967,
          "score": 1,
          "content": "&quot;#define System s()&quot; saves two characters",
          "date": "2009-06-25 19:18:25Z",
          "user": "Adam Rosenfield",
          "user_link": "https://stackoverflow.com/users/9530/adam-rosenfield",
          "reputation": 398124
        },
        {
          "id": 875938,
          "score": 0,
          "content": "I don&#39;t believe this was &quot;real-world&quot; like the question author specified...but I voted up anyway! The perversity of compiling &quot;java&quot; in c++ is hilarious!",
          "date": "2009-06-30 14:20:10Z",
          "user": "A. Levy",
          "user_link": "https://stackoverflow.com/users/35881/a-levy",
          "reputation": 30306
        },
        {
          "id": 1077044,
          "score": 38,
          "content": "@Mark - It declares <code>public</code> and <code>static as nothing, </code>void` as <code>int</code>, and <code>main(x)</code> as <code>main()</code>, so <code>public static void main(String[] args)</code> turns into <code>int main()</code>. Then <code>System</code> turns into <code>S s;s</code>, so <code>System.out.println(&quot;Hello World!&quot;);</code> turns into <code>S s; s.out.println(&quot;Hello World!&quot;);</code> which calls the <code>println</code> function in the <code>F</code> struct in the <code>S</code> struct.",
          "date": "2009-08-09 02:15:28Z",
          "user": "Chris Lutz",
          "user_link": "https://stackoverflow.com/users/60777/chris-lutz",
          "reputation": 74959
        },
        {
          "id": 1298996,
          "score": 2,
          "content": "Take a look at this: <a href=\"http://www.mailcom.com/ioccc/chia/chia.c\" rel=\"nofollow noreferrer\">mailcom.com/ioccc/chia/chia.c</a> (download and compile it)",
          "date": "2009-09-20 21:35:46Z",
          "user": "Roberto Bonvallet",
          "user_link": "https://stackoverflow.com/users/13169/roberto-bonvallet",
          "reputation": 33071
        },
        {
          "id": 9495678,
          "score": 0,
          "content": "@AndreasPetersson Java-to-C++ to be exact.",
          "date": "2011-10-17 14:44:08Z",
          "user": "",
          "user_link": null,
          "reputation": 0
        }
      ]
    },
    {
      "id": 652795,
      "rating": 130,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define private public</code></pre>",
      "edited": "2009-11-03 06:21:46Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652795/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466184,
          "score": 0,
          "content": "I&#39;ve done that before.  Sometimes you just need to modify a member variable or override a function in some third-party code that you can&#39;t change - and they didn&#39;t provide an accessor for you.",
          "date": "2009-03-17 02:30:14Z",
          "user": "Michael Kristofik",
          "user_link": "https://stackoverflow.com/users/46821/michael-kristofik",
          "reputation": 35008
        },
        {
          "id": 466206,
          "score": 0,
          "content": "I did this yesterday, and wanted to smack myself in the head for doing it. But it&#39;s only done in a small test app that uses header files from the main app.",
          "date": "2009-03-17 02:37:05Z",
          "user": "Graeme Perrow",
          "user_link": "https://stackoverflow.com/users/1821/graeme-perrow",
          "reputation": 57048
        },
        {
          "id": 466760,
          "score": 30,
          "content": "wow for unit testing this might even be useful, even though the ghosts of object design will haunt you at night.",
          "date": "2009-03-17 08:40:20Z",
          "user": "Epaga",
          "user_link": "https://stackoverflow.com/users/6583/epaga",
          "reputation": 38911
        },
        {
          "id": 857038,
          "score": 12,
          "content": "Hmmm, undefined behavior, easy violation of the one-definition rule, potential layout differences.  Yup, this is a winner.",
          "date": "2009-06-25 19:30:12Z",
          "user": "David Thornley",
          "user_link": "https://stackoverflow.com/users/14148/david-thornley",
          "reputation": 56916
        },
        {
          "id": 2753157,
          "score": 10,
          "content": "So with that, I can access private and public stuff, but not protected stuff, and I can&#39;t access the stuff between the <code>class</code> keyword and the first access modifier.",
          "date": "2010-04-28 01:15:59Z",
          "user": "Ken Bloom",
          "user_link": "https://stackoverflow.com/users/197788/ken-bloom",
          "reputation": 58449
        },
        {
          "id": 8531748,
          "score": 3,
          "content": "@Ken: <code>#define class struct #define protected public</code>",
          "date": "2011-08-19 10:12:25Z",
          "user": "Yakov Galka",
          "user_link": "https://stackoverflow.com/users/277176/yakov-galka",
          "reputation": 72129
        }
      ]
    },
    {
      "id": 652951,
      "rating": 107,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define if while</code></pre><p>It was joke played on someone, it wasn't found amusing by those affected</p>",
      "edited": "2009-07-01 03:57:07Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652951/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466597,
          "score": 22,
          "content": "#define while if would be even more insidious.",
          "date": "2009-03-17 07:05:59Z",
          "user": "starblue",
          "user_link": "https://stackoverflow.com/users/49246/starblue",
          "reputation": 56488
        },
        {
          "id": 469604,
          "score": 0,
          "content": "#define try #define catch(x) #define switch(x) #define if(x) #define while(x)  and so on...",
          "date": "2009-03-17 21:30:13Z",
          "user": "1800 INFORMATION",
          "user_link": "https://stackoverflow.com/users/3146/1800-information",
          "reputation": 134491
        },
        {
          "id": 878796,
          "score": 7,
          "content": "We should clarify your statement. It wasn&#39;t found amusing <i>by the people affected</i>. :-)",
          "date": "2009-06-30 23:08:40Z",
          "user": "Andrew Shepherd",
          "user_link": "https://stackoverflow.com/users/25216/andrew-shepherd",
          "reputation": 45112
        },
        {
          "id": 881654,
          "score": 6,
          "content": "When I did homework assignments, I often did this kind of things on purpose, just to annoy my teachers.",
          "date": "2009-07-01 14:06:29Z",
          "user": "isekaijin",
          "user_link": "https://stackoverflow.com/users/46571/isekaijin",
          "reputation": 19682
        },
        {
          "id": 1388250,
          "score": 15,
          "content": "This is a good prank but it won&#39;t compile if there are any &quot;else&quot; statements.  I&#39;ve found that #define if(x) if(true) is most effective.",
          "date": "2009-10-07 15:42:33Z",
          "user": "Graphics Noob",
          "user_link": "https://stackoverflow.com/users/127669/graphics-noob",
          "reputation": 10010
        },
        {
          "id": 4867322,
          "score": 32,
          "content": "I always preferred #define sizeof(x) rand()",
          "date": "2010-12-15 22:15:01Z",
          "user": "Jon",
          "user_link": "https://stackoverflow.com/users/497924/jon",
          "reputation": 3065
        }
      ]
    },
    {
      "id": 652820,
      "rating": 106,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The hideous:</p><pre><code>#define begin {#define end }/* and so on */</code></pre><p>Seriously, if you want to code in Pascal, buy a Pascal compiler, don't destroy the beautiful C language.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/652820/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 02:19:20Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466171,
          "score": 45,
          "content": "Now you&#39;ve got me wondering what languages I can simulate with a clever enough header file.",
          "date": "2009-03-17 02:24:22Z",
          "user": "Bill the Lizard",
          "user_link": "https://stackoverflow.com/users/1288/bill-the-lizard",
          "reputation": 404271
        },
        {
          "id": 466499,
          "score": 47,
          "content": "C is not beautiful. It&#39;s rather ugly.",
          "date": "2009-03-17 05:38:07Z",
          "user": "rlbond",
          "user_link": "https://stackoverflow.com/users/72631/rlbond",
          "reputation": 67348
        },
        {
          "id": 466525,
          "score": 27,
          "content": "Its beauty lies in its simplicity. It&#39;s been said it has all the speed of assembly language combined with the readability of ... assembly language :-) I prefer it over the bloated C++ (although I do prefer Java in my day job due to its huge library).",
          "date": "2009-03-17 06:02:00Z",
          "user": "paxdiablo",
          "user_link": "https://stackoverflow.com/users/14860/paxdiablo",
          "reputation": 876475
        },
        {
          "id": 466552,
          "score": 9,
          "content": "No really. Find Bourne&#39;s original source for the bourne shell. He did exactly this to get some kind of bastard ALGOL-like mess.",
          "date": "2009-03-17 06:27:51Z",
          "user": "RBerteig",
          "user_link": "https://stackoverflow.com/users/68204/rberteig",
          "reputation": 43016
        },
        {
          "id": 466919,
          "score": 1,
          "content": "This is actually pretty common, as far as I understand, this comes from converting legacy code from pascal, or something of the sort. I&#39;ve seen it in several projects, I&#39;m not sure why people don&#39;t just use replace...",
          "date": "2009-03-17 10:24:24Z",
          "user": "SurDin",
          "user_link": "https://stackoverflow.com/users/70898/surdin",
          "reputation": 3341
        },
        {
          "id": 466992,
          "score": 0,
          "content": "Am I bad person for considering #define until(x) while(!(x)) on a few occasions? (I&#39;ve never done it, before you hang me!)",
          "date": "2009-03-17 10:57:45Z",
          "user": "Bernard",
          "user_link": "https://stackoverflow.com/users/61/bernard",
          "reputation": 45508
        },
        {
          "id": 476251,
          "score": 0,
          "content": "@Bernard - Of course not! As a Perlite, I get frustrated when I remember I don&#39;t have until() or unless() in C. Or postfix notation. If anyone can come up with a macro to allow me to write &quot;i++ if(i);&quot; in C, I will give you five dollars. And a free hug.",
          "date": "2009-03-19 15:32:46Z",
          "user": "Chris Lutz",
          "user_link": "https://stackoverflow.com/users/60777/chris-lutz",
          "reputation": 74959
        },
        {
          "id": 564789,
          "score": 0,
          "content": "I&#39;ve seen code like this before.  It was one of the first things I scrubbed out as soon as I had the time.",
          "date": "2009-04-15 19:48:52Z",
          "user": "Anthony Giorgio",
          "user_link": "https://stackoverflow.com/users/9816/anthony-giorgio",
          "reputation": 1864
        },
        {
          "id": 609705,
          "score": 0,
          "content": "@Chris-Lutz - &quot;i++ if(i);&quot; is i += (i != 0); so you can do INC_IF_NOT_EQUAL(x, y) { x += x != y; }",
          "date": "2009-04-28 19:45:07Z",
          "user": "LiraNuna",
          "user_link": "https://stackoverflow.com/users/41983/liranuna",
          "reputation": 66834
        },
        {
          "id": 1180880,
          "score": 3,
          "content": "#define DO for (int _i=0; _i &lt;= 1; ++_i) { if (_i==1) ////LINE BREAK//// #define IF(cond) ; if (!(cond)) break; } ////LINE BREAK//// DO printf(&quot;a&quot;) IF (1==2);",
          "date": "2009-08-28 06:51:54Z",
          "user": "Adrian Panasiuk",
          "user_link": "https://stackoverflow.com/users/111160/adrian-panasiuk",
          "reputation": 7313
        },
        {
          "id": 1684887,
          "score": 0,
          "content": "@paxdiablo: Well, I have heard it called &quot;Portable assembly.&quot; It lives up to its name well.",
          "date": "2009-11-25 14:31:30Z",
          "user": "Cristi&#xE1;n Romo",
          "user_link": "https://stackoverflow.com/users/1256/cristi%c3%a1n-romo",
          "reputation": 9962
        },
        {
          "id": 4342619,
          "score": 0,
          "content": "Ha! Some guy I interviewed did this. And &quot;#define not !&quot; &quot;#define repeat while {&quot; &quot;#define until(x) } (x)&quot; etc. Thank you so much for you time...",
          "date": "2010-10-28 16:50:00Z",
          "user": "Nick",
          "user_link": "https://stackoverflow.com/users/3233/nick",
          "reputation": 27966
        },
        {
          "id": 11856540,
          "score": 0,
          "content": "hideous? Not to everyone! I remember seeing a suggestion to use a pair of <code>#define</code>s like that in a <a href=\"http://books.google.com/books?id=4miO-X83hmUC&amp;pg=PA142#v=onepage&amp;q&amp;f=false\" rel=\"nofollow noreferrer\"><b>printed book</b></a>. To be fair, the author mentioned that it&#39;s not a good idea, but I&#39;ve seen <a href=\"http://books.google.com/books?id=65tQAAAAMAAJ&amp;q=%22%23define+end%22+%22%23define+begin%22&amp;dq=%22%23define+end%22+%22%23define+begin%22&amp;hl=en&amp;sa=X&amp;ei=LA1ET8icELG60QHD96TkBw&amp;sqi=2&amp;ved=0CFAQ6AEwBg\" rel=\"nofollow noreferrer\">older books</a> where such definitions are considered almost normal.",
          "date": "2012-02-21 21:35:09Z",
          "user": "Sergey Kalinichenko",
          "user_link": "https://stackoverflow.com/users/335858/sergey-kalinichenko",
          "reputation": 724397
        }
      ]
    },
    {
      "id": 652852,
      "rating": 93,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>An 'architect', very humble guy, you know the type, had the following:</p><pre><code>#define retrun return</code></pre><p>because he liked to type fast. The brain-surgeon used to like to shout at people who were smarter than him (which was pretty much everyone), and threaten to use his black-belt on them. </p>",
      "edited": "2010-09-08 08:14:44Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652852/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466412,
          "score": 0,
          "content": "I make that typo so much I actually considered it.",
          "date": "2009-03-17 04:26:38Z",
          "user": "Joshua",
          "user_link": "https://stackoverflow.com/users/14768/joshua",
          "reputation": 42639
        },
        {
          "id": 466939,
          "score": 4,
          "content": "rather teach your editor to autoreplace retrun into return. Ive done such hackeries to my IRC-client, at least",
          "date": "2009-03-17 10:33:09Z",
          "user": "Tetha",
          "user_link": "https://stackoverflow.com/users/17663/tetha",
          "reputation": 4906
        },
        {
          "id": 1291696,
          "score": 1,
          "content": "Hey, I think I used to work with that &#39;architect&#39; as well. He eventually got reclassified senior-architect when he needed to have his ego appeased.",
          "date": "2009-09-18 16:51:24Z",
          "user": "BIBD",
          "user_link": "https://stackoverflow.com/users/685/bibd",
          "reputation": 15345
        },
        {
          "id": 2412611,
          "score": 1,
          "content": "I had &#39;rn&#39; redefined to &#39;rm&#39; in bash, because I couldn&#39;t type and the &#39;rn&#39; newsreader took 5 minutes to startup and connect to the server.",
          "date": "2010-03-11 21:40:56Z",
          "user": "Martin Beckett",
          "user_link": "https://stackoverflow.com/users/10897/martin-beckett",
          "reputation": 95889
        },
        {
          "id": 3588061,
          "score": 2,
          "content": "You couldn&#39;t just open a new terminal (or switch to another vt) and do <code>killall rn</code>?",
          "date": "2010-08-09 18:53:22Z",
          "user": "Joe D",
          "user_link": "https://stackoverflow.com/users/292979/joe-d",
          "reputation": 2953
        },
        {
          "id": 8165541,
          "score": 0,
          "content": "@Martin There&#39;s an <code>sl</code> program that displays a train animation.  (<code>sl</code> stands for &quot;Steam Locomotive.&quot;)",
          "date": "2011-07-28 19:34:40Z",
          "user": "Maxpm",
          "user_link": "https://stackoverflow.com/users/497934/maxpm",
          "reputation": 25264
        }
      ]
    },
    {
      "id": 653686,
      "rating": 69,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Real-world?  MSVC has macros in minmax.h, called <code>max</code> and <code>min</code>, which cause a compiler error every time I intend to use the standard <code>std::numeric_limits&lt;T&gt;::max()</code> function.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653686/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 10:36:22Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466981,
          "score": 2,
          "content": "Ah, yes, that&#39;s why I had a special header with sanity-restoring #undef&#39;s after the MS-specific ones...",
          "date": "2009-03-17 10:53:50Z",
          "user": "Pontus Gagge",
          "user_link": "https://stackoverflow.com/users/20402/pontus-gagge",
          "reputation": 17240
        },
        {
          "id": 857236,
          "score": 3,
          "content": "Solved with (std::numeric_limits&lt;T&gt;::max)() But yeah, pretty annoying.",
          "date": "2009-06-25 20:04:41Z",
          "user": "rlbond",
          "user_link": "https://stackoverflow.com/users/72631/rlbond",
          "reputation": 67348
        },
        {
          "id": 1068819,
          "score": 36,
          "content": "Add NOMINMAX to your project properties under C/C++ -&gt; Preprocessor -&gt; Preprocessor Definitions.",
          "date": "2009-08-07 01:12:59Z",
          "user": "mattnewport",
          "user_link": "https://stackoverflow.com/users/139091/mattnewport",
          "reputation": 14007
        },
        {
          "id": 1070271,
          "score": 0,
          "content": "@mattnewport: Thanks, I didn&#39;t even dream there was a solution to this!",
          "date": "2009-08-07 09:49:02Z",
          "user": "xtofl",
          "user_link": "https://stackoverflow.com/users/6610/xtofl",
          "reputation": 41341
        },
        {
          "id": 1135525,
          "score": 0,
          "content": "It&#39;s telling that there <i>needs</i> to be a solution to it, a solution <i>specific</i> to <code>min</code> and <code>max</code>.  For each other common function that happens to have a macro shadowing it you need another &quot;solution&quot;.",
          "date": "2009-08-20 05:02:20Z",
          "user": "quark",
          "user_link": "https://stackoverflow.com/users/29057/quark",
          "reputation": 15802
        },
        {
          "id": 1295363,
          "score": 0,
          "content": "Naming a function or variable &quot;NOMINMAX&quot; would be evil, but it could happen. There can be unforeseen casualties when you fight macros with more macros. :)",
          "date": "2009-09-19 17:52:14Z",
          "user": "bk1e",
          "user_link": "https://stackoverflow.com/users/8090/bk1e",
          "reputation": 24288
        },
        {
          "id": 1297169,
          "score": 0,
          "content": "@bk1e: it so happens that MS <i>documents</i> this preprocessor definition to inhibit definition of the <code>min</code> and <code>max</code> macro&#39;s...  But you&#39;re right.",
          "date": "2009-09-20 09:08:58Z",
          "user": "xtofl",
          "user_link": "https://stackoverflow.com/users/6610/xtofl",
          "reputation": 41341
        },
        {
          "id": 1306830,
          "score": 18,
          "content": "These macros have existed in the MS headers longer than min and max have been in the C++ Standard Library.",
          "date": "2009-09-22 08:15:07Z",
          "user": "Richard",
          "user_link": "https://stackoverflow.com/users/67392/richard",
          "reputation": 108587
        },
        {
          "id": 2074955,
          "score": 4,
          "content": "It&#39;s even worse when four of your other external dependencies also define min/max of their own, of varying degrees of suckiness, ranging from badly-parenthesised macros to well-written templates, and one of them just has to make it impossible to be undefined or otherwise skip these... In my book the language is 50% to blame though.",
          "date": "2010-01-25 20:10:35Z",
          "user": "Roman Starkov",
          "user_link": "https://stackoverflow.com/users/33080/roman-starkov",
          "reputation": 60970
        }
      ]
    },
    {
      "id": 653663,
      "rating": 58,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>A mix between Pascal syntax and french keywords:</p><pre><code>#define debut {#define fin }#define si if(#define alors ){#define sinon }else{#define finsi }</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653663/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 10:22:45Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 857223,
          "score": 36,
          "content": "#define zut_alors exit(-1)",
          "date": "2009-06-25 20:02:43Z",
          "user": "MikeyB",
          "user_link": "https://stackoverflow.com/users/93180/mikeyb",
          "reputation": 3344
        },
        {
          "id": 3778922,
          "score": 4,
          "content": "That is awesome and it made me laugh out loud. So, this is basically a localized French version of Basic implemented in C?",
          "date": "2010-08-30 11:02:25Z",
          "user": "Bobby",
          "user_link": "https://stackoverflow.com/users/180239/bobby",
          "reputation": 11526
        }
      ]
    },
    {
      "id": 653017,
      "rating": 56,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Raymond Chen has a <a href=\"http://blogs.msdn.com/oldnewthing/archive/2005/01/06/347666.aspx\" rel=\"nofollow noreferrer\">really good rant against using flow control macros</a>. His best example is straight from the original Bourne shell source code:</p><pre><code>ADDRESS alloc(nbytes)    POS     nbytes;{    REG POS rbytes = round(nbytes+BYTESPERWORD,BYTESPERWORD);    LOOP    INT     c=0;    REG BLKPTR  p = blokp;    REG BLKPTR  q;    REP IF !busy(p)        THEN    WHILE !busy(q = p-&gt;word) DO p-&gt;word = q-&gt;word OD        IF ADR(q)-ADR(p) &gt;= rbytes        THEN    blokp = BLK(ADR(p)+rbytes);            IF q &gt; blokp            THEN    blokp-&gt;word = p-&gt;word;            FI            p-&gt;word=BLK(Rcheat(blokp)|BUSY);            return(ADR(p+1));        FI        FI        q = p; p = BLK(Rcheat(p-&gt;word)&amp;~BUSY);    PER p&gt;q ORF (c++)==0 DONE    addblok(rbytes);    POOL}</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653017/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 04:21:08Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 2885500,
          "score": 2,
          "content": "Two points: one, this paste messed up the original indentation. And two, the code looks fine for what it is: 1970s Unix C by a fervent Algol-68 fan. If _why the lucky stiff can express himself in a quirky style, why can&#39;t Steve Bourne? Of course, someone condemned to maintain it who doesn&#39;t know Algol 68 may not appreciate this chance to broaden their own tastes.",
          "date": "2010-05-16 07:55:36Z",
          "user": "Darius Bacon",
          "user_link": "https://stackoverflow.com/users/27024/darius-bacon",
          "reputation": 15084
        },
        {
          "id": 8165972,
          "score": 0,
          "content": "I think this might be intended as a joke by Steve Bourne rather than a suggested programming style",
          "date": "2011-07-28 20:01:28Z",
          "user": "Martin Beckett",
          "user_link": "https://stackoverflow.com/users/10897/martin-beckett",
          "reputation": 95889
        },
        {
          "id": 8545767,
          "score": 2,
          "content": "I&#39;ve seen <code>if</code>...<code>else</code>...<code>elif</code>...<code>fi</code> and <code>case</code>...<code>esac</code> before (in the very language that Bourne invented for sh), but <code>loop</code>...<code>pool</code> is a real gem.",
          "date": "2011-08-20 02:57:44Z",
          "user": "hobbs",
          "user_link": "https://stackoverflow.com/users/152948/hobbs",
          "reputation": 236481
        }
      ]
    },
    {
      "id": 1242177,
      "rating": 54,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I would like to submit for the contest a gem called <a href=\"http://chaos-pp.cvs.sourceforge.net/chaos-pp/order-pp/example/bottles.c?revision=1.10&amp;view=markup\" rel=\"nofollow noreferrer\">chaos-pp</a>, which implements a functional language by means of the preprocessor macros.</p><p>One of the examples is calculating the 500th fibonacci number entirely by the preprocessor:</p><p>The original code before preprocessor looks as this:</p><pre><code>int main(void) {   printf     (\"The 500th Fibonacci number is \"      ORDER_PP(8stringize(8to_lit(8fib(8nat(5,0,0)))))      \".\\n\");   return 0;}</code></pre><p>preprocessing the file we get the following result (after a rather long wait):</p><pre><code>$ cpp -I../inc fibonacci.c 2&gt;/dev/null | tail  return fib_iter(n, 0, 1);}# 63 \"fibonacci.c\"int main(void) {   printf     (\"The 500th Fibonacci number is \"      \"139423224561697880139724382870407283950070256587697307264108962948325571622863290691557658876222521294125\"      \".\\n\");   return 0;}</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1242177/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-08-07 00:00:14Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1293898,
          "score": 1,
          "content": "You can grab the code from CVS and take a look. I had put some more details about it into my blogpost a while ago when I stumbled upon it: <a href=\"http://bnpcs.blogspot.com/2009/02/preprocessor-directives-for-ruby-not.html\" rel=\"nofollow noreferrer\">bnpcs.blogspot.com/2009/02/&hellip;</a>  If not for the problem with debugging the resulting code (the problem of having hugely long lines if they are generated by such a &quot;language&quot;), it could have been even usable as a practical code-generator for C.",
          "date": "2009-09-19 04:06:34Z",
          "user": "Andrew Y",
          "user_link": "https://stackoverflow.com/users/120901/andrew-y",
          "reputation": 5107
        },
        {
          "id": 11229700,
          "score": 0,
          "content": "I can just imagine it taking forever to compile",
          "date": "2012-01-23 00:44:51Z",
          "user": "Paul Fultz II",
          "user_link": "https://stackoverflow.com/users/375343/paul-fultz-ii",
          "reputation": 18070
        }
      ]
    },
    {
      "id": 653311,
      "rating": 52,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Directly from Qt:</p><pre><code>#define slots   /* */#define signals /* */</code></pre><p>Really nice to interact with other libs as boost::signals... Just an example, there are many others in Qt that create funny looking code like:</p><pre><code>class X : public QObject {   Q_OBJECTprivate slots:   //...public signals:   //...};</code></pre><p>And that is C++... but suddenly:</p><pre><code>boost::signals::trackable</code></pre><p>Is not valid C++ any more.</p>",
      "edited": "2009-03-17 10:13:19Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/653311/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466890,
          "score": 0,
          "content": "I believe it&#39;s expanded to nothing.",
          "date": "2009-03-17 10:12:35Z",
          "user": "strager",
          "user_link": "https://stackoverflow.com/users/39992/strager",
          "reputation": 89794
        },
        {
          "id": 466950,
          "score": 5,
          "content": ":) So it is a macro that breaks other libraries for nothing. That&#39;s even better than I expected :)",
          "date": "2009-03-17 10:37:06Z",
          "user": "David Rodr&#xED;guez - dribeas",
          "user_link": "https://stackoverflow.com/users/36565/david-rodr%c3%adguez-dribeas",
          "reputation": 207655
        },
        {
          "id": 1068832,
          "score": 38,
          "content": "Qt is very territorial and will viciously attack other libraries that try to occupy its namespace :)",
          "date": "2009-08-07 01:16:43Z",
          "user": "Jeremy Friesner",
          "user_link": "https://stackoverflow.com/users/131930/jeremy-friesner",
          "reputation": 72645
        },
        {
          "id": 1076637,
          "score": 21,
          "content": "Sadly Qt attacks libraries outside of its namespace with the use of macros",
          "date": "2009-08-08 22:21:32Z",
          "user": "David Rodr&#xED;guez - dribeas",
          "user_link": "https://stackoverflow.com/users/36565/david-rodr%c3%adguez-dribeas",
          "reputation": 207655
        },
        {
          "id": 1084518,
          "score": 7,
          "content": "Fortunately boost::signals2 has fixed this issue ;)",
          "date": "2009-08-10 22:14:31Z",
          "user": "bdonlan",
          "user_link": "https://stackoverflow.com/users/36723/bdonlan",
          "reputation": 229977
        },
        {
          "id": 1288386,
          "score": 9,
          "content": "Use Q_SIGNALS and Q_SLOTS if you&#39;re afraid of this interaction.",
          "date": "2009-09-18 06:45:09Z",
          "user": "Tadeusz A. Kad&#x142;ubowski",
          "user_link": "https://stackoverflow.com/users/122460/tadeusz-a-kad%c5%82ubowski",
          "reputation": 8305
        },
        {
          "id": 2367418,
          "score": 2,
          "content": "Since Qt is a really big framework there&#39;s little reason to use other libraries, especially boost::signals. Those macros make perfect sense in the code that uses Qt. If you don&#39;t want them, just disable them and use Q_WHATEVER. Not a problem at all.",
          "date": "2010-03-05 18:43:49Z",
          "user": "CMircea",
          "user_link": "https://stackoverflow.com/users/161336/cmircea",
          "reputation": 3558
        },
        {
          "id": 2412628,
          "score": 0,
          "content": "Not just boost &#39;signals&#39; is used by a lot of software, why didn&#39;t they at least put them in a Qt namespace!",
          "date": "2010-03-11 21:42:47Z",
          "user": "Martin Beckett",
          "user_link": "https://stackoverflow.com/users/10897/martin-beckett",
          "reputation": 95889
        },
        {
          "id": 2413063,
          "score": 1,
          "content": "Macros are dealt with in the preprocessor before the compiler kicks in, they escape namespaces.",
          "date": "2010-03-11 22:36:19Z",
          "user": "David Rodr&#xED;guez - dribeas",
          "user_link": "https://stackoverflow.com/users/36565/david-rodr%c3%adguez-dribeas",
          "reputation": 207655
        },
        {
          "id": 2902296,
          "score": 0,
          "content": "@Martin, because macros are copy-paste string replacing; the preprocessor doesn&#39;t know it&#39;s working over C++, to it it&#39;s just text.",
          "date": "2010-05-18 15:06:25Z",
          "user": "CMircea",
          "user_link": "https://stackoverflow.com/users/161336/cmircea",
          "reputation": 3558
        },
        {
          "id": 2902710,
          "score": 0,
          "content": "@iconiK, true, the signal/slots are jut tags for the MOC to pick up, they could at least have made the macro qt::signal so there was less chance of collision.  ps you can build QT with a flag to rename them Q_SIGNAL and Q_SLOT",
          "date": "2010-05-18 15:52:16Z",
          "user": "Martin Beckett",
          "user_link": "https://stackoverflow.com/users/10897/martin-beckett",
          "reputation": 95889
        },
        {
          "id": 2904771,
          "score": 0,
          "content": "@Martin, actually MOC looks for Q_SIGNAL, Q_SIGNALS, Q_SLOT and Q_EMIT. The QtGlobal header file (not sure if this one) includes #defines for signals, slots and emit for your convenience; those can easily be disabled by a #define if they get in the way, thus your argument is not well thought out.",
          "date": "2010-05-18 19:54:27Z",
          "user": "CMircea",
          "user_link": "https://stackoverflow.com/users/161336/cmircea",
          "reputation": 3558
        }
      ]
    },
    {
      "id": 652896,
      "rating": 50,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Windows.h has a lot of functions that abused macros.</p><hr><p>MrValdez is annoyed by the GetObject macro found in Windows.h</p><p>The GetObject macro changes the GetObject() function into GetObjectA() or GetObjectW() (depending if the build is compiled in non-unicode and unicode, respectively)</p><p>MrValdez hates having to do before the GetObject function line</p><pre><code>#undef GetObjectObject *GetObject()</code></pre><p>The alternative is to change the function name to something else like GetGameObject()</p><hr><p>jdkoftinoff in the comments have nailed it: The problem is that all windows API functions are macros.</p><p>Adam Rosenfield mentioned that that the issues can be fixed by defining NOGDI, WIN32_LEAN_AND_MEAN, NOMINMAX, etc before including windows.h to remove the issues.</p>",
      "edited": "2009-03-17 03:51:26Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652896/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466263,
          "score": 3,
          "content": "You can suppress this but #define&#39;ing NOGDI before including windows.h, provided of course that you don&#39;t need to use any of the various GDI functions.  There are a bunch of other macros such as WIN32_LEAN_AND_MEAN, NOMINMAX, etc. that suppress other things from being defined or included.",
          "date": "2009-03-17 03:10:34Z",
          "user": "Adam Rosenfield",
          "user_link": "https://stackoverflow.com/users/9530/adam-rosenfield",
          "reputation": 398124
        },
        {
          "id": 466268,
          "score": 0,
          "content": "Hmm. Interesting. But my point still stands, I have to remember to #define NOGDI as well as those other macros because Windows.h abused macros.",
          "date": "2009-03-17 03:15:36Z",
          "user": "MrValdez",
          "user_link": "https://stackoverflow.com/users/1599/mrvaldez",
          "reputation": 8583
        },
        {
          "id": 466275,
          "score": 1,
          "content": "GetObject is a pretty generic function name.  Perhaps you could have used a more descriptive name given the context to avoid the collision.  However, that is a pretty evil macro case.",
          "date": "2009-03-17 03:20:12Z",
          "user": "strager",
          "user_link": "https://stackoverflow.com/users/39992/strager",
          "reputation": 89794
        },
        {
          "id": 466305,
          "score": 1,
          "content": "It is quite annoying that win32 has all the macros to convert API names to FooA and FooW.  We have the problem with SendMessage.",
          "date": "2009-03-17 03:37:50Z",
          "user": "i_am_jorf",
          "user_link": "https://stackoverflow.com/users/74815/i-am-jorf",
          "reputation": 54430
        },
        {
          "id": 466307,
          "score": 6,
          "content": "Problem is that all windows API functions are macros. One that bit me was GetTickCount(). Since I do most of my programming outside of windows, I found all the defines in the windows headers and then made my own include file which defined them all to verify compatibility beforehand.",
          "date": "2009-03-17 03:38:24Z",
          "user": "jdkoftinoff",
          "user_link": "https://stackoverflow.com/users/32198/jdkoftinoff",
          "reputation": 2421
        },
        {
          "id": 466336,
          "score": 1,
          "content": "I&#39;ve changed this post into a community wiki. GetObject() is just one macro. There are a lot more. Anone can feel free to edit the post.",
          "date": "2009-03-17 03:52:29Z",
          "user": "MrValdez",
          "user_link": "https://stackoverflow.com/users/1599/mrvaldez",
          "reputation": 8583
        },
        {
          "id": 467005,
          "score": 0,
          "content": "What difference does it make if your function actually gets renamed to GetObjectA / GetObjectW? With MFC, the function SendMessage actually gets changed to SendMessageW",
          "date": "2009-03-17 11:01:15Z",
          "user": "Mark Ingram",
          "user_link": "https://stackoverflow.com/users/986/mark-ingram",
          "reputation": 73269
        },
        {
          "id": 469762,
          "score": 1,
          "content": "@Mark Ingram: the problem is that if you have a header file declare a function named GetObject(), and that header doesn&#39;t include windows.h, but another file includes windows.h before your header, you&#39;ll end up with different names and a compiler or linker error.",
          "date": "2009-03-17 22:14:08Z",
          "user": "Adam Rosenfield",
          "user_link": "https://stackoverflow.com/users/9530/adam-rosenfield",
          "reputation": 398124
        },
        {
          "id": 512117,
          "score": 0,
          "content": "Haha I just ran into another variant of this on Windows.  Calling a method called &quot;FillMemory()&quot; for a memory test class. Actual error: Not enough actual parameters for macro RtlFillmemory. see: <a href=\"http://msdn.microsoft.com/en-us/library/aa366561(VS.85).aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/aa366561(VS.85).aspx</a>",
          "date": "2009-03-30 21:52:37Z",
          "user": "jdkoftinoff",
          "user_link": "https://stackoverflow.com/users/32198/jdkoftinoff",
          "reputation": 2421
        },
        {
          "id": 1071118,
          "score": 12,
          "content": "I think we have a winner. It&#39;s real-world, it&#39;s a ridiculously bad idea, and it&#39;s affected a huge number of innocent programmers. Whoever is responsible for this gem at Microsoft should be considered a war criminal... The best part is that Microsoft didn&#39;t think twice about using such amazingly common names, like GetObject, SendMessage or CreateWindow.",
          "date": "2009-08-07 13:22:16Z",
          "user": "Stack Overflow is garbage",
          "user_link": "https://stackoverflow.com/users/33213/stack-overflow-is-garbage",
          "reputation": 246973
        },
        {
          "id": 6064687,
          "score": 0,
          "content": "I&#39;ve ran into that very same problem in a class that happened to have a member function called <code>GetNumberFormat</code>.",
          "date": "2011-03-20 05:15:44Z",
          "user": "dan04",
          "user_link": "https://stackoverflow.com/users/287586/dan04",
          "reputation": 90487
        }
      ]
    },
    {
      "id": 1643723,
      "rating": 45,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define return if (std::random(1000) &lt; 2) throw std::exception(); else return</code></pre><p>this is just so evil. It's random, which means it fires in different places all the time, it changes return statement, which usually have some code on it that could fail all by itself, it changes innocent looking keyword that you won't ever get suspicious over and it uses exception from std space so you won't try to search through your sources to find it's source. Just brilliant. </p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1643723/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-10-29 13:26:14Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 3541706,
          "score": 4,
          "content": "Just tested this one, at least it doesn&#39;t compile by default because of a missing include for random, and it&#39;s red-squiggled then. If you have the include by accident, however, things get worse - VC++2010 marks it still as a keyword and does not show the macro expansion tooltip, so no help from the IDE to find this :-/",
          "date": "2010-08-04 10:09:33Z",
          "user": "OregonGhost",
          "user_link": "https://stackoverflow.com/users/20363/oregonghost",
          "reputation": 23683
        },
        {
          "id": 3983855,
          "score": 0,
          "content": "I love it! Pure genius. Imagine how good you can look when you &quot;Debug&quot; This application when no one else has managed to.",
          "date": "2010-09-21 22:49:35Z",
          "user": "brice",
          "user_link": "https://stackoverflow.com/users/140264/brice",
          "reputation": 24941
        }
      ]
    },
    {
      "id": 1045726,
      "rating": 36,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>A coworker and I found these two gems in some of our code for object streaming.  These macros were instantiated in <strong><em>EVERY SINGLE</em></strong> class file that did streaming.  Not only is this hideous code spewed all over our code base, when we approached the original author about it, he wrote a 7 page article on our internal wiki defending this as the only possible way to accomplish what he was attempting to do here. </p><p>Needless to say, it has since been refactored out and is no longer used in our code base.</p><p><strong>Don't be thrown off by the highlighted keywords.  This is ALL a macro</strong></p><pre><code>#define DECLARE_MODIFICATION_REQUEST_PACKET( T )                                                \\namespace NameSpace                                                                     \\{                                                                                       \\                                                                                        \\class T##ElementModificationRequestPacket;                                                          \\}                                                                                       \\                                                                                        \\DECLARE_STREAMING_TEMPLATES( IMPEXP_COMMON_TEMPLATE_DECLARE, NameSpace::ElementModificationRequestPacket&lt;T&gt;, OtherNameSpace::NetPacketBase )    \\DLLIMPEXP_COMMON_TEMPLATE_DECLARE( NameSpace::ElementModificationRequestPacket&lt;T&gt; )     \\DECLARE_AUTOGENERATION_TEMPLATES( DLLIMPEXP_COMMON_TEMPLATE_DECLARE, NameSpace::T##ModificationRequestPacket, NameSpace::ElementModificationRequestPacket&lt;T&gt; )      \\                                                                                        \\namespace NameSpace {                                                                   \\class DLLIMPEXP_COMMON T##ModificationRequestPacket : public ElementModificationRequestPacket&lt;T&gt;\\{                                                                                       \\public:                                                                                 \\    T##ModificationRequestPacket( NetBase * pParent )                                   \\    : ElementModificationRequestPacket&lt;T&gt;( pParent ), m_Gen() {}                            \\                                                                                        \\    T##ModificationRequestPacket( NetBase * pParent,                                    \\                            Action          eAction,                                    \\                            const T &amp;   rT )                                            \\    : ElementModificationRequestPacket&lt;T&gt;( pParent, eAction, rT ), m_Gen() {}               \\                                                                                        \\    T##ModificationRequestPacket( const T##ModificationRequestPacket &amp; rhs )                        \\    : ElementModificationRequestPacket&lt;T&gt;( rhs ), m_Gen() {}                                \\                                                                                        \\    virtual                     ~T##ModificationRequestPacket( void ) {}                        \\                                                                                        \\    virtual Uint32          GetPacketTypeID( void ) const                           \\    {                                                                                   \\        return Net::T##_Modification_REQUEST_PACKET;                                        \\    }                                                                                   \\                                                                                        \\    virtual OtherNameSpace::ClassID GetClassID ( void ) const                           \\    {                                                                                   \\        return OtherNameSpace::NetBase::GenerateHeader( OtherNameSpace::ID__LICENSING,  \\                                                         Net::T##_Modification_REQUEST_PACKET );    \\    }                                                                                   \\                                                                                        \\    virtual T##ModificationRequestPacket * Create( void ) const                             \\    { return new T##ModificationRequestPacket( m_pParent ); }                                   \\                                                                                        \\    T##ModificationRequestPacket() {}                                                           \\                                                                                        \\protected:                                                                              \\    OtherNameSpace::ObjectAutogeneration&lt;T##ModificationRequestPacket&gt; m_Gen;                       \\                                                                                        \\    friend class OtherNameSpace::StreamingBase::StreamingClassInfoT&lt;T##ModificationRequestPacket &gt;;                     \\    OtherNameSpace::StreamingBase::Streaming&lt;T##ModificationRequestPacket, ElementModificationRequestPacket&lt;T&gt; &gt;    m_Stream;   \\                                                                                        \\};                                                                                      \\}                                                                                       \\DLLIMPEXP_COMMON_TEMPLATE_DECLARE( ThirdNameSpace::ListenerBase&lt;const NameSpace::T##ModificationRequestPacket&gt; )            \\DLLIMPEXP_COMMON_TEMPLATE_DECLARE( ThirdNameSpace::BroadcasterT&lt;const NameSpace::T##ModificationRequestPacket&gt; )            \\typedef  ThirdNameSpace::BroadcasterT&lt;const T##ModificationRequestPacket&gt;  T##ModifiedBroadcaster;#define IMPLEMENT_MODIFICATION_REQUEST_PACKET( T )                                                                  \\DLLIMPEXP_COMMON_TEMPLATE_INSTANTIATE( NameSpace::ElementModificationRequestPacket&lt;T&gt; )                         \\DLLIMPEXP_COMMON_TEMPLATE_INSTANTIATE( ThirdNameSpace::ListenerBase&lt;const NameSpace::T##ModificationRequestPacket&gt; )        \\DLLIMPEXP_COMMON_TEMPLATE_INSTANTIATE( ThirdNameSpace::BroadcasterT&lt;const NameSpace::T##ModificationRequestPacket&gt; )        \\INSTANTIATE_STREAMING_TEMPLATES( DLLIMPEXP_COMMON_TEMPLATE_INSTANTIATE, NameSpace::ElementModificationRequestPacket&lt;T&gt;, OtherNameSpace::NetPacketBase ) \\INSTANTIATE_AUTOGENERATION_TEMPLATES( DLLIMPEXP_COMMON_TEMPLATE_INSTANTIATE, NameSpace::T##ModificationRequestPacket, NameSpace::ElementModificationRequestPacket&lt;T&gt; )</code></pre><hr><p>Update (December 17, 2009):</p><p>More good news regarding this hideous macro author.  As of August, the employee responsible for this monstrosity was sacked.</p>",
      "edited": "2009-12-17 18:49:23Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1045726/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 7605317,
          "score": 3,
          "content": "he obviously has never heard of: &quot;Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.&quot; -Brian W. Kernighan",
          "date": "2011-06-24 18:47:09Z",
          "user": "Trevor Boyd Smith",
          "user_link": "https://stackoverflow.com/users/52074/trevor-boyd-smith",
          "reputation": 19041
        }
      ]
    },
    {
      "id": 1594500,
      "rating": 33,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I did the following myself, and I think I learned something from it.</p><p>In 1992 or so I wrote a small Lisp interpreter. It wasn't implemented in normalC, but in an interpreted C-like language. This C-like language used the standard C pre-processor, though.</p><p>The Lisp interpreter of course contained the functions <strong>car</strong>, which isused in Lisp to return the first element in a list, and <strong>cdr</strong>, whichreturns the rest of the list. They were implemented like this:</p><pre><code>LISPID car(LISPID id) {    CHECK_CONS(\"car\", 1, id);    return cons_cars[id - CONS_OFFSET];} /* car */LISPID cdr(LISPID id) {    CHECK_CONS(\"cdr\", 1, id);    return cons_cdrs[id - CONS_OFFSET];} /* cdr */</code></pre><p>(Data were stored in arrays, since there were no structs. <strong>CONS_OFFSET</strong> is the constant 1000.)</p><p><strong>car</strong> and <strong>cdr</strong> are used frequently in Lisp, and are short, and since function calls weren'tvery fast in the implementation language, I optimized my code by implementing those two Lisp functions as macros:</p><pre><code>#define car(id) (CHECK_CONS(\"car\", 1, (id)), cons_cars[(id) - CONS_OFFSET])#define cdr(id) (CHECK_CONS(\"car\", 1, (id)), cons_cdrs[(id) - CONS_OFFSET])</code></pre><p><strong>CHECK_CONS</strong> checks that its argument actually is a list, and since that one is also used frequently in the interpreter, and is short, I wrote that one too as a macro:</p><pre><code>#define CHECK_CONS(fun, pos, arg)   \\    (!IS_CONS(arg) ?        \\        LISP_ERROR(\"Arg \" + pos + \" to \" + fun +    \\                   \" must be a list: \" + lispid2string(arg)) : 0)</code></pre><p><strong>IS_CONS</strong> and <strong>LISP_ERROR</strong> were also used frequently, so I made them into macros too:</p><pre><code>#define IS_CONS(id) \\    (   intp(id) &amp;&amp; (id) &gt;= CONS_OFFSET     \\     &amp;&amp; ((id) - CONS_OFFSET) &lt; sizeof(cons_cars))#define LISP_ERROR(str)     (throw((str) + \"\\n\"))</code></pre><p>Seems reasonable?</p><p>But then, why did the entire system crash on this line:</p><pre><code>id2 = car(car(car(car((id1))));</code></pre><p>I worked a long time to find the problem, until I finally checked whatthat short line was expanded to by the pre-processor. It was expanded to a 31370-character line, which I have here split into lines (502 of them) for clarity:</p><pre><code>id2 = ((!(intp( (((!(intp( (((!(intp( (((!(intp( (id1)) &amp;&amp; ((id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000])))&amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp( (id1)) &amp;&amp; ((id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000]))) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1))&gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \"+ 1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string((id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000])))) + \"\\n\")) : 0),cons_cars[(((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &amp;&amp; ( (((!(intp( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) - 1000) &lt; sizeof(cons_cars))? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp;(( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to\" + \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")): 0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ((id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000])))&gt;= 1000 &amp;&amp; (( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])))) + \"\\n\")) : 0),cons_cars[(((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (((id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \"+ \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) :0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1))&gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \"+ 1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string((id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])) - 1000]))) &amp;&amp; ( (((!(intp((((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &amp;&amp; ( (((!(intp( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) - 1000) &lt; sizeof(cons_cars))? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp;(( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to\" + \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")): 0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ((id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000])))&gt;= 1000 &amp;&amp; (( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])))) + \"\\n\")) : 0),cons_cars[(((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (((id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \"+ \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) :0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1))&gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \"+ 1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string((id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])) - 1000]))) &gt;= 1000 &amp;&amp; (((((!(intp( (((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (((id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \"+ \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) :0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1))&gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \"+ 1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string((id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &amp;&amp; ( (((!(intp( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) - 1000) &lt; sizeof(cons_cars))? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp;(( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to\" + \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")): 0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ((id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000])))&gt;= 1000 &amp;&amp; (( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])))) + \"\\n\")) : 0),cons_cars[(((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (((id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \"+ \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) :0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1))&gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \"+ 1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string((id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])) - 1000]))) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (((!(intp( (((!(intp( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &amp;&amp; ( (((!(intp( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (( (((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000]))) - 1000) &lt; sizeof(cons_cars))? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp;(( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to\" + \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")): 0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ((id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000])))&gt;= 1000 &amp;&amp; (( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])))) + \"\\n\")) : 0),cons_cars[(((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (((id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \"+ \"car\" + \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) :0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1)) &amp;&amp; ( (id1))&gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \"+ 1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string((id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &gt;= 1000 &amp;&amp; (((((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1))- 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\"+ \" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])))) + \"\\n\")) : 0), cons_cars[(((!(intp((id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt;sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" + \" mustbe a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000])) - 1000])) - 1000])))) + \"\\n\")) : 0),cons_cars[(((!(intp( (((!(intp( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;=1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" +1 + \" to \" + \"car\" + \" must be a list: \" + lispid2string( (id1)))+ \"\\n\")) : 0), cons_cars[(id1) - 1000]))) &amp;&amp; ( (((!(intp( (id1))&amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) - 1000) &lt; sizeof(cons_cars)) ?(throw((\"Arg \" + 1 + \" to \" + \"car\" + \" must be a list: \" +lispid2string( (id1))) + \"\\n\")) : 0), cons_cars[(id1) - 1000])))&gt;= 1000 &amp;&amp; (( (((!(intp( (id1)) &amp;&amp; ( (id1)) &gt;= 1000 &amp;&amp; (( (id1)) -1000) &lt; sizeof(cons_cars)) ? (throw((\"Arg \" + 1 + \" to \" + \"car\" +\" must be a list: \" + lispid2string( (id1))) + \"\\n\")) : 0),cons_cars[(id1) - 1000]))) - 1000) &lt; sizeof(cons_cars))</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1594500/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-10-20 13:08:09Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 2949635,
          "score": 18,
          "content": "<code>I optimized my code by implementing those [..] functions as macros</code> - famous last words...",
          "date": "2010-05-24 20:23:16Z",
          "user": "BlueRaja - Danny Pflughoeft",
          "user_link": "https://stackoverflow.com/users/238419/blueraja-danny-pflughoeft",
          "reputation": 85499
        },
        {
          "id": 7936703,
          "score": 3,
          "content": "I committed similar abuses in early versions of my Postscript interpreter. Push and pop were the functions that were <i>so important that they should be macros</i>. But composing an expression involving more than one of these leads to undefined behavior. The undefined behavior is only caught when compiling at -O3. And at -O3 the function versions would have been inlined anyway.",
          "date": "2011-07-15 09:22:08Z",
          "user": "luser droog",
          "user_link": "https://stackoverflow.com/users/733077/luser-droog",
          "reputation": 19414
        }
      ]
    },
    {
      "id": 1466303,
      "rating": 29,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I once had to port a C application from unix to windows, the specific nature of which shall remain unnamed to protect the guilty.  The guy who wrote it was a professor unaccustomed to writing production code, and had clearly come to C from some other language.  It also happens that English wasn't his first language, though the country he came from the majority of people speak it quite well.</p><p>His application made heavy use of the preprocessor to twist the C language into a format he could better understand.  But the macros he used the most were defined in a header file named 'Thing.h' (seriously), which included the following:</p><pre><code>#define I  Any void_me#define thou  Any void_thee#define iam(klas)  klas me = (klas) void_me#define thouart(klas)  klas thee = (klas) void_thee#define my  me -&gt;#define thy  thee -&gt;#define his  him -&gt;#define our  my methods -&gt;#define your  thy methods -&gt;</code></pre><p>...which he then used to write monstrosities like the following:</p><pre><code>void Thing_setName (I, const char *name) {iam (Thing);if (name != my name) {    Melder_free (my name);    my name = Melder_wcsdup (name);    }    our nameChanged (me);}void Thing_overrideClass (I, void *klas) {iam (Thing);my methods = (Thing_Table)klas;if (! ((Thing_Table) klas) -&gt; destroy)    ((Thing_Table) klas) -&gt; _initialize (klas);}</code></pre><p>The entire project (~60,000 LOC) was written in a similar style -- marco hell, weird names, Olde-English jargon, etc.  Fortunately we were able to throw the code out since I found an OSS library which performed the same algorithm dozens of times faster.</p><p>(I've copied and edited this answer which I originally made <a href=\"https://stackoverflow.com/questions/143701/what-is-the-worst-class-variable-function-name-you-have-ever-encountered/194124#194124\">on this question</a>).</p>",
      "edited": "2017-05-23 12:10:45Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1466303/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 2885549,
          "score": 3,
          "content": "I&#39;m rather charmed by the possessives and archaic English, for all that of course I agree the code looks terrible.",
          "date": "2010-05-16 08:09:08Z",
          "user": "Darius Bacon",
          "user_link": "https://stackoverflow.com/users/27024/darius-bacon",
          "reputation": 15084
        }
      ]
    },
    {
      "id": 653124,
      "rating": 27,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The worst I've ever encountered was in a product containing a suite of executables where the designated technical leader hadn't figured out libraries.</p><p>Instead, he had sets of files that were shared in several Visual Source Safe folders.He then realised they needed to behave slightly differently for each application. </p><p>There's a number of refactoring steps you could apply here.</p><p>Instead, he used #ifdefs</p><pre><code>   void DisplayLoadError()   {   #if defined __TIMETABLE_EDITOR   MessageBox(\"Timetable Editor failed to load the correct timetable\", MB_ERROR);   #else if defined __SCHEDULESET_EDITOR   MessageBox(\"Schedule Set Editor faied to load the correct Schedule Set\", MB_ERROR);   #else if defined __ROSTER_EDITOR   MessageBox(\"Roster Editor failed to load the correct Roster\", MB_ERROR);   #endif   }</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653124/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 05:52:00Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 652869,
      "rating": 17,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The use of the LINE preprocessor to generate unique ID for messages passed over the network:</p><pre><code>NetworkMessages.h#define MSG_LOGIN  __LINE__#define MSG_LOGOUT __LINE__#define MSG_CHAT   __LINE__</code></pre><p>This is an example where the macro really was better than a non-macro solution:</p><p>In a non-macro solution classes, functions and variables have to be built to keep track of what ID the message is. The developer may or may not make the message ID tracking complicated whereas this is easier to read and debug.</p><p>In addition, its easier to add new messages just by adding the message into the source.</p><p>The disadvantage of this situation is that the file has to be included in all code that uses messages. Compile time would increase whenever a message is edited.</p>",
      "edited": "2009-03-17 04:37:02Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652869/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466272,
          "score": 8,
          "content": "And versions may be incompatible with each other (not good!).  How come an enum didn&#39;t suffice?",
          "date": "2009-03-17 03:19:02Z",
          "user": "strager",
          "user_link": "https://stackoverflow.com/users/39992/strager",
          "reputation": 89794
        },
        {
          "id": 466434,
          "score": 0,
          "content": "Both this and the Enum has the exact same problem of incompatibility.",
          "date": "2009-03-17 04:36:22Z",
          "user": "MrValdez",
          "user_link": "https://stackoverflow.com/users/1599/mrvaldez",
          "reputation": 8583
        },
        {
          "id": 466557,
          "score": 17,
          "content": "Now I come along and sort the #defines... and the protocol changes. Or I get the Doxygen religion and document all the message codes, and the protocol changes. At least an enum is stable under the latter change.",
          "date": "2009-03-17 06:33:19Z",
          "user": "RBerteig",
          "user_link": "https://stackoverflow.com/users/68204/rberteig",
          "reputation": 43016
        },
        {
          "id": 857970,
          "score": 3,
          "content": "@MrValdez, it&#39;s less restrictive to keep a block of enums in order, than to keep defines on the same lines relative to file start.",
          "date": "2009-06-25 22:31:37Z",
          "user": "peterchen",
          "user_link": "https://stackoverflow.com/users/31317/peterchen",
          "reputation": 41465
        },
        {
          "id": 13169880,
          "score": 0,
          "content": "I know that this is an old post, but does this even work? I mean #define will just replace message constants to <b>LINE</b> and only then <b>LINE</b> will be expanded to line number, so each time we use the same constant on different lines - it will change (to current line number)?",
          "date": "2012-04-20 13:19:40Z",
          "user": "XzKto",
          "user_link": "https://stackoverflow.com/users/775993/xzkto",
          "reputation": 2502
        }
      ]
    },
    {
      "id": 652823,
      "rating": 16,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>One fairly bad example:</p><pre><code>#ifdef __cplusplus#define class _vclass#endif</code></pre><p>This allows a C structure that contains a member variable called <code>class</code> to be handled by a C++ compiler.  There are two headers with this construct in it; one of them also contains '#undef class' at the end and the other doesn't.</p>",
      "edited": "2009-03-17 03:16:21Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652823/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 10324927,
          "score": 1,
          "content": "This is why Objective-C uses <code>@class</code> instead of <code>class</code>.",
          "date": "2011-12-03 13:37:15Z",
          "user": "",
          "user_link": null,
          "reputation": 0
        }
      ]
    },
    {
      "id": 662119,
      "rating": 14,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>In one year of the International Obfuscated C Coding Contest, there was an entry where the entire program was:</p><p><code>P</code></p><p>With the proviso that you could define <code>P</code> in the makefile to be whatever program you wanted.</p><p>As I recall, it won in one of the categories, and the next year a rule had popped up disallowing that style of entry.</p><p>(Edit: six months later or something... I'm sure the \"No IOCCC\" thing wasn't in the main question when I wrote this...)</p>",
      "edited": "2009-09-23 16:21:27Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/662119/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 2428865,
      "rating": 12,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I was bored one day and was playing around with blocks in Objective-C...</p><pre><code>#define Lambda(var, body) [^ id(id (var)) { return (body);} copy]#define Call(f, arg) ((id(^)(id))(f))(arg)#define Int(num) [NSNumber numberWithInteger:(num)]#define Mult(a, b) Int([(a) integerValue] * [(b) integerValue])#define Add(a, b) Int([(a) integerValue] + [(b) integerValue])#define Sub1(n) Int([(n) integerValue] - 1)#define Add1(n) Int([(n) integerValue] + 1)#define If(cond, thenblock, elseblock) ([(cond) integerValue] ? (thenblock) : (elseblock))#define Cons(car, cdr_) [[ConsType alloc] initWithCar:(car) cdr:(cdr_)]#define Car(list) [(list) car]#define Cdr(list) [(list) cdr]#define Define(var, value) id var = (value)#define Nullq(value) Int(value == nil)</code></pre><p>allowing \"interesting\" things like:</p><pre><code>Define(Y, Lambda(f, Call(Lambda(x, Call(x, x)),                         Lambda(x, Call(f, Lambda(y, Call(Call(x, x), y)))))));Define(AlmostTotal, Lambda(f, Lambda(list, If(Nullq(list), Int(0),                                              Add(Car(list), Call(f, Cdr(list)))))));Define(Total, Call(Y, AlmostTotal));Print(Call(Total, Cons(Int(4), Cons(Int(5), Cons(Int(8), nil)))));</code></pre><p>(some function and class definitions not shown for sake of brevity)</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/2428865/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2010-03-11 21:34:59Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 23385640,
          "score": 0,
          "content": "&quot;I was bored one day&quot; famous developer last words :)",
          "date": "2013-05-02 01:20:54Z",
          "user": "Richard J. Ross III",
          "user_link": "https://stackoverflow.com/users/427309/richard-j-ross-iii",
          "reputation": 55403
        }
      ]
    },
    {
      "id": 652800,
      "rating": 11,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The worst one I saw was the non-use :-)</p><p>Someone wrote a strcpy (I think that was it... over 10 years ago now) function inside of a method (because they didn't want the overhead of calling strcpy... sigh).</p><p>They clued in that it wouldn't work for Japanese characters so they added an \"if\" at the start to do ASCII or Unicode.  At that point the code was about a screen long... likely killing cache coherency and erasing his supposed savings for the inlining of the code.</p><p>The code was identical save for the types (so should have used a macro).</p><p>Of course the strcpy that they wrote was much much much slower than the hand tuned assembler one that was in the standard library...</p><p>Of course if they had just done it all as a macro it could have been replaced with a call to strcpy...</p><p>Of course I quit the company (not directly because of that...) </p>",
      "edited": "2009-03-17 02:19:08Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652800/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 5634300,
          "score": 0,
          "content": "<code>The code was identical save for the types (so should have used a macro).</code> No, he should have used a template.",
          "date": "2011-02-17 23:54:07Z",
          "user": "BlueRaja - Danny Pflughoeft",
          "user_link": "https://stackoverflow.com/users/238419/blueraja-danny-pflughoeft",
          "reputation": 85499
        },
        {
          "id": 5634669,
          "score": 1,
          "content": "He should have used the built in strcpy! (and it was C code not C++ so no templates) :-P",
          "date": "2011-02-18 00:35:03Z",
          "user": "TofuBeer",
          "user_link": "https://stackoverflow.com/users/65868/tofubeer",
          "reputation": 61412
        },
        {
          "id": 10800292,
          "score": 0,
          "content": "Premature optimisation is the root of all evil.",
          "date": "2011-12-31 01:13:33Z",
          "user": "Hubert Kario",
          "user_link": "https://stackoverflow.com/users/462370/hubert-kario",
          "reputation": 22440
        }
      ]
    },
    {
      "id": 652866,
      "rating": 11,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The obligatory</p><pre><code>#define FOR  for</code></pre><p>and</p><pre><code>#define ONE  1#define TWO  2...</code></pre><p>Who knew?</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/652866/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 02:38:29Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 467009,
          "score": 5,
          "content": "But-but-but NO LITERALS IN CODE! ;)",
          "date": "2009-03-17 11:03:57Z",
          "user": "Bernard",
          "user_link": "https://stackoverflow.com/users/61/bernard",
          "reputation": 45508
        },
        {
          "id": 476180,
          "score": 0,
          "content": "they still be literals mon, should name em by purpose/intent not alternate symbol.  COBOL code I heard about they made variable 5 = 5 then later had code saying set 5 = 10... people where real suprised when they did var + 5 and got var + 10.",
          "date": "2009-03-19 15:13:03Z",
          "user": "Greg Domjan",
          "user_link": "https://stackoverflow.com/users/37558/greg-domjan",
          "reputation": 14005
        },
        {
          "id": 857066,
          "score": 1,
          "content": "Never heard of that with COBOL, only with FORTRAN.  COBOL, of course, has ZERO, ZEROS, and ZEROES as reserved words, all of them meaning the exact same thing as 0.",
          "date": "2009-06-25 19:34:46Z",
          "user": "David Thornley",
          "user_link": "https://stackoverflow.com/users/14148/david-thornley",
          "reputation": 56916
        },
        {
          "id": 1287869,
          "score": 0,
          "content": "Much better than &quot;#define ONE 0&quot;.  If you want a giggle, search the web for that and be surprised by the non-zero number of hits.",
          "date": "2009-09-18 03:21:48Z",
          "user": "reuben",
          "user_link": "https://stackoverflow.com/users/41646/reuben",
          "reputation": 3370
        }
      ]
    },
    {
      "id": 1442864,
      "rating": 11,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define TRUE 0 // dumbass</code></pre><p>The person who did this explained himself some years later - most (if not all) C library functions return 0 as an indication that everything went well. So, he wanted to be able to write code like:</p><pre><code>if (memcpy(buffer, packet, BUFFER_SIZE) == TRUE) {; // rape that packet}</code></pre><p>Needless to say, nobody in our team (tester or developer) ever dared to glance at his code again.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1442864/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-09-18 06:29:13Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 4679671,
          "score": 1,
          "content": "i blame the C library functions for making 0 &quot;everything is OK&quot; :P",
          "date": "2010-11-30 00:47:27Z",
          "user": "RCIX",
          "user_link": "https://stackoverflow.com/users/117069/rcix",
          "reputation": 39309
        },
        {
          "id": 5132859,
          "score": 6,
          "content": "Why not declare something like <code>#define FLAG_SUCCESS 0</code>?",
          "date": "2011-01-11 16:14:23Z",
          "user": "isekaijin",
          "user_link": "https://stackoverflow.com/users/46571/isekaijin",
          "reputation": 19682
        }
      ]
    },
    {
      "id": 1045833,
      "rating": 11,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I maintain code that has gotos in macros. So a function will have a label at the end but no visible goto in the function code. To make matters worse the macro is at the end of other statements usually off the screen unless you scroll horizontally.</p><pre><code>#define CHECK_ERROR if (!SomeCondition) goto Cleanupvoid SomeFunction() {     SomeLongFunctionName(ParamOne, ParamTwo, ParamThree, ParamFour); CHECK_ERROR      //SomeOtherCode      Cleanup:       //Cleanup code  }</code></pre>",
      "edited": "2009-09-18 16:59:02Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1045833/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1287873,
          "score": 0,
          "content": "What&#39;s worse is when macros hide both the <code>goto</code> statements as well as the definitions of the target labels.  Totally magic.",
          "date": "2009-09-18 03:24:33Z",
          "user": "reuben",
          "user_link": "https://stackoverflow.com/users/41646/reuben",
          "reputation": 3370
        },
        {
          "id": 1290339,
          "score": 0,
          "content": "I&#39;ve suffered from that - but the macros looked like function calls.",
          "date": "2009-09-18 13:45:12Z",
          "user": "Jonathan Leffler",
          "user_link": "https://stackoverflow.com/users/15168/jonathan-leffler",
          "reputation": 749241
        }
      ]
    },
    {
      "id": 653001,
      "rating": 10,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#include &lt;iostream&gt;#define public_static_void_main(x) int main()#define System_out_println(x) std::cout &lt;&lt; x &lt;&lt; std::endlpublic_static_void_main(String[] args) {  System_out_println(\"Hello World!\");}</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653001/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 04:08:47Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 467001,
          "score": 3,
          "content": "And YOU wanted to write a runtime. Look at how much time I saved!",
          "date": "2009-03-17 11:00:15Z",
          "user": "Bernard",
          "user_link": "https://stackoverflow.com/users/61/bernard",
          "reputation": 45508
        },
        {
          "id": 468244,
          "score": 4,
          "content": "@Trevor: Yeah... the smart ones are still doing Java instead. <i>runs for cover</i>",
          "date": "2009-03-17 16:10:55Z",
          "user": "Michael Myers",
          "user_link": "https://stackoverflow.com/users/13531/michael-myers",
          "reputation": 191415
        },
        {
          "id": 469766,
          "score": 0,
          "content": "If you put the [] after args instead of before, and &quot;#define String int argc, char*&quot;, it will compile (sadly).",
          "date": "2009-03-17 22:15:36Z",
          "user": "Adam Rosenfield",
          "user_link": "https://stackoverflow.com/users/9530/adam-rosenfield",
          "reputation": 398124
        },
        {
          "id": 856849,
          "score": 16,
          "content": "I like the other one better. This one shows something close to Java being written with a few macros. The other one shows exact Java being written with a plethora of sneaky macros and structs with function members. The first one was a cheap joke, whereas the second one was an elaborate and well-though out joke.",
          "date": "2009-06-25 18:55:41Z",
          "user": "Chris Lutz",
          "user_link": "https://stackoverflow.com/users/60777/chris-lutz",
          "reputation": 74959
        }
      ]
    },
    {
      "id": 2757710,
      "rating": 10,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>By a classmate who failed to understand the rules about magic numbers:<br><code>#define TWO_HUNDRED_AND_EIGHTY_THREE_POINT_ONE 283.1</code>  </p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/2757710/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2010-05-03 11:35:11Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1045763,
      "rating": 9,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>ASA - <a href=\"http://www.ingber.com/#ASA\" rel=\"nofollow noreferrer\">http://www.ingber.com/#ASA</a></p><p>You really have to download it to appreciate it. The entire work flow is determined by macros. It is completely unreadable. As an example - </p><pre><code> if (asa_open == FALSE) {asa_open = TRUE;++number_asa_open;#if ASA_PRINTif (number_asa_open == 1) {  /* open the output file */#if USER_ASA_OUT  if (!strcmp (OPTIONS-&gt;Asa_Out_File, \"STDOUT\")) {#if INCL_STDOUT    ptr_asa_out = stdout;#endif /* INCL_STDOUT */  } else {#if ASA_SAVE    ptr_asa_out = fopen (OPTIONS-&gt;Asa_Out_File, \"a\");#else    ptr_asa_out = fopen (OPTIONS-&gt;Asa_Out_File, \"w\");#endif  }#else /* USER_ASA_OUT */  if (!strcmp (ASA_OUT, \"STDOUT\")) {#if INCL_STDOUT    ptr_asa_out = stdout;#endif /* INCL_STDOUT */  } else {#if ASA_SAVE    ptr_asa_out = fopen (ASA_OUT, \"a\");#else    ptr_asa_out = fopen (ASA_OUT, \"w\");#endif  }#endif /* USER_ASA_OUT */} else {#if USER_ASA_OUT  if (!strcmp (OPTIONS-&gt;Asa_Out_File, \"STDOUT\")) {#if INCL_STDOUT    ptr_asa_out = stdout;#endif /* INCL_STDOUT */  } else {    ptr_asa_out = fopen (OPTIONS-&gt;Asa_Out_File, \"a\");  }#else  if (!strcmp (ASA_OUT, \"STDOUT\")) {#if INCL_STDOUT    ptr_asa_out = stdout;#endif /* INCL_STDOUT */  } else {    ptr_asa_out = fopen (ASA_OUT, \"a\");  }#endif  fprintf (ptr_asa_out, \"\\n\\n\\t\\t number_asa_open = %d\\n\",           number_asa_open);}#endif /* ASA_PRINT */} else {++recursive_asa_open;#if ASA_PRINTif (recursive_asa_open == 1) {  /* open the output file */#if ASA_SAVE#if USER_ASA_OUT  if (!strcmp (OPTIONS-&gt;Asa_Out_File, \"STDOUT\")) {#if INCL_STDOUT    ptr_asa_out = stdout;#endif /* INCL_STDOUT */  } else {    ptr_asa_out = fopen (OPTIONS-&gt;Asa_Out_File, \"a\");  }#else  if (!strcmp (ASA_OUT, \"STDOUT\")) {#if INCL_STDOUT    ptr_asa_out = stdout;#endif /* INCL_STDOUT */  } else {    ptr_asa_out = fopen (ASA_OUT, \"a\");  }#endif#else /* ASA_SAVE */#if USER_ASA_OUT  if (!strcmp (OPTIONS-&gt;Asa_Out_File, \"STDOUT\")) {#if INCL_STDOUT    ptr_asa_out = stdout;#endif /* INCL_STDOUT */  } else {</code></pre><p>etc., etc.</p><p>And that is just setting up the options. the entire program is like that.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1045763/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-06-25 19:26:36Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 3615439,
          "score": 2,
          "content": "Oh my god...I think I&#39;m getting dizzy.",
          "date": "2010-08-12 09:09:40Z",
          "user": "Michael F",
          "user_link": "https://stackoverflow.com/users/149530/michael-f",
          "reputation": 40619
        }
      ]
    },
    {
      "id": 1445656,
      "rating": 9,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>A \"technical manager\" who had formerly been a coder introduced the following <em>wonderful</em> macros into our C++ project because he thought that checking for <code>NULL</code> values in DOM parsing routines was just too much work:</p>\n\n<pre><code>TRYSEGV\nCATCHSEGV\n</code></pre>\n\n<p>Under the covers, these used <code>setjmp</code>, <code>longjmp</code>, and a <em>signal handler</em> for <code>SIGSEGV</code> to emulate the ability to \"catch\" a segfault.</p>\n\n<p>Of course, nothing in the code reset the jump pointed once the code had exited the scope of the original <code>TRYSEGV</code> macro invocation, so <em>any</em> segfault in the code would return to the (now invalid) <code>jump_env</code> pointer.</p>\n\n<p>The code would immediately die there, but not before destroying the program stack and rendering debugging more or less pointless.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1445656/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-09-18 16:38:05Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1291678,
          "score": 0,
          "content": "Not sure if the macros are the biggest problem here, but wow.  This is heinous.",
          "date": "2009-09-18 16:48:35Z",
          "user": "reuben",
          "user_link": "https://stackoverflow.com/users/41646/reuben",
          "reputation": 3370
        }
      ]
    },
    {
      "id": 652915,
      "rating": 8,
      "checkmark": true,
      "bounty": 0,
      "content": "<p><a href=\"https://rads.stackoverflow.com/amzn/click/com/1584500778\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">AI Game Programming Wisdom</a> has a chapter where macros were used to create a <strong>scripting language</strong> for finite state machines. </p>\n\n<p>Since the book and code are copyrighted material, here's a <a href=\"http://books.google.com/books?id=4f5Gszjyb8EC&amp;pg=PA326&amp;lpg=PA326&amp;dq=macro+ai+game&amp;source=bl&amp;ots=9ASPntSylj&amp;sig=KNg7dAxVv5cRdI75yDjBaFThi7U&amp;hl=en&amp;ei=NRS_SZtpj4w1w4PAqA0&amp;sa=X&amp;oi=book_result&amp;resnum=6&amp;ct=result\" rel=\"nofollow noreferrer\">Google book link</a> to the page detailing the macros (The resulting script language can be found on page 324.)</p>",
      "edited": "2009-09-20 20:27:08Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652915/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466972,
          "score": 3,
          "content": "Why is that so evil? The macros simplify the code (to some extent). Good programming languages allow you to create mini-languages that mirror the problem domain. C offers you the preprocessor as the main option, unless you want to spell out the portable assembler...",
          "date": "2009-03-17 10:50:12Z",
          "user": "Pontus Gagge",
          "user_link": "https://stackoverflow.com/users/20402/pontus-gagge",
          "reputation": 17240
        },
        {
          "id": 472692,
          "score": 0,
          "content": "Its not evil per se. It an abuse of the preprocessor to make it do things it wasn&#39;t meant to do.",
          "date": "2009-03-18 17:17:53Z",
          "user": "MrValdez",
          "user_link": "https://stackoverflow.com/users/1599/mrvaldez",
          "reputation": 8583
        },
        {
          "id": 857211,
          "score": 9,
          "content": "@MrValdez: Your abuse is someone else&#39;s brilliant masterpiece. :)",
          "date": "2009-06-25 20:00:16Z",
          "user": "MikeyB",
          "user_link": "https://stackoverflow.com/users/93180/mikeyb",
          "reputation": 3344
        }
      ]
    },
    {
      "id": 1067349,
      "rating": 7,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>At Lucent, I once took a look at the source code of Steve Bourne's original Unix shell, and  found he'd used the C pre-processor to make C look like <s>Pascal or</s> Algol.  The part dealing with if statements looked like this:</p>\n\n<pre><code>#define IF   if (\n#define THEN ) {\n#define ELSE } else {\n#define ELIF } else if (\n#define FI   ; }\n</code></pre>\n\n<p>A friend of mine told me he'd done some maintenance on it in the mid-1990s, and it was still the same.  (There's a lesson here for us in the inherent conservatism of a code base.)</p>\n\n<p>Of course Steve did this as an experiment in the early days, and I'm sure would have had second thoughts if he'd written it later. </p>\n\n<p>Update: According to Wikipedia's <a href=\"http://en.wikipedia.org/wiki/Bourne_shell\" rel=\"nofollow noreferrer\">Bourne Shell article</a>, the macros gave it an <strong>Algol 68</strong> flavor.  And, the <a href=\"http://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h\" rel=\"nofollow noreferrer\">full set of macros</a> is here!  They apparently influenced the founders of the International Obfuscated C Code Contest.</p>",
      "edited": "2011-07-15 21:10:57Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1067349/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1069255,
          "score": 2,
          "content": "That&#39;s more like Algol than Pascal - it is Algol that uses backwards keywords (like &#39;fi&#39;) to mark the end of constructs.  The shell uses that, in general.  Fun question: why is the end of a loop in Bourne shell marked by &#39;<code>done</code>&#39; and not &#39;<code>od</code>&#39;?",
          "date": "2009-08-07 04:11:41Z",
          "user": "Jonathan Leffler",
          "user_link": "https://stackoverflow.com/users/15168/jonathan-leffler",
          "reputation": 749241
        },
        {
          "id": 1070941,
          "score": 3,
          "content": "Because &#39;od&#39; stands for Octal Dump, which was a utility in Unix Seventh Edition.",
          "date": "2009-08-07 12:41:49Z",
          "user": "kmarsh",
          "user_link": "https://stackoverflow.com/users/101547/kmarsh",
          "reputation": 1398
        },
        {
          "id": 1070966,
          "score": 0,
          "content": "Jonathan, I&#39;ve noted this in the text ... I don&#39;t remember the details, but an Algol-like syntax was a strong possibility.  Ahh, I see: &#39;od&#39; was the pre-existing octal dump command.  Interesting!",
          "date": "2009-08-07 12:48:52Z",
          "user": "Jim Ferrans",
          "user_link": "https://stackoverflow.com/users/45935/jim-ferrans",
          "reputation": 30952
        },
        {
          "id": 1135485,
          "score": 0,
          "content": "This is one of the more famous early examples of preprocessor (ab)use. in the days before curly brace syntax was considered a sign of a &quot;serious&quot; language.",
          "date": "2009-08-20 04:51:50Z",
          "user": "quark",
          "user_link": "https://stackoverflow.com/users/29057/quark",
          "reputation": 15802
        },
        {
          "id": 2009415,
          "score": 0,
          "content": "this fails on &#39;else if&#39; does algol have &#39;else if&#39; ?",
          "date": "2010-01-16 19:51:36Z",
          "user": "smerlin",
          "user_link": "https://stackoverflow.com/users/231717/smerlin",
          "reputation": 6536
        },
        {
          "id": 2011197,
          "score": 0,
          "content": "@smerlin: Click on the &quot;full set of macros&quot; link to see the actual ones.  You want the ELIF macro.",
          "date": "2010-01-17 07:08:03Z",
          "user": "Jim Ferrans",
          "user_link": "https://stackoverflow.com/users/45935/jim-ferrans",
          "reputation": 30952
        },
        {
          "id": 7939815,
          "score": 0,
          "content": "The link didn&#39;t work for me, but this one does: <a href=\"http://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h\" rel=\"nofollow noreferrer\">minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h</a>",
          "date": "2011-07-15 12:45:44Z",
          "user": "luser droog",
          "user_link": "https://stackoverflow.com/users/733077/luser-droog",
          "reputation": 19414
        },
        {
          "id": 9101908,
          "score": 0,
          "content": "I&#39;ve seen some professors in an officially french college distribute a &quot;<code>francais.h</code>&quot; file to students containing stuff like: <code>#define si if</code> and <code>#define tant_que while</code> to get them to &quot;code in french&quot;.  Thankfully the class never tried to cover the STL.  I would have snapped if they had the students write <code>std::chaine_de_caracteres</code> instead of <code>std::string</code>.",
          "date": "2011-09-22 13:29:09Z",
          "user": "Andr&#xE9; Caron",
          "user_link": "https://stackoverflow.com/users/313063/andr%c3%a9-caron",
          "reputation": 45159
        }
      ]
    },
    {
      "id": 7028068,
      "rating": 7,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I like this example, it uses the macro to approximate the value of PI. The larger the circle, the more accurate the approximation.</p>\n\n<pre><code>#define _ -F&lt;00||--F-OO--;\nint F=00,OO=00;main(){F_OO();printf(\"%1.3f\\n\",4.*-F/OO/OO);}F_OO()\n{\n            _-_-_-_\n       _-_-_-_-_-_-_-_-_\n    _-_-_-_-_-_-_-_-_-_-_-_\n  _-_-_-_-_-_-_-_-_-_-_-_-_-_\n _-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n _-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n _-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n _-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n  _-_-_-_-_-_-_-_-_-_-_-_-_-_\n    _-_-_-_-_-_-_-_-_-_-_-_\n        _-_-_-_-_-_-_-_\n            _-_-_-_\n}\n</code></pre>\n\n<hr>\n\n<p>Another is the <code>c</code> program</p>\n\n<pre><code>c\n</code></pre>\n\n<p>To compile you need to define <code>c</code> as</p>\n\n<pre><code>-Dc=\"#include &lt;stdio.h&gt; int main() { char *t =\\\"Hello World\\n\\\"; while(*t) putc(*t++, stdout); return 0; }\"\n</code></pre>",
      "edited": "2011-08-11 15:15:56Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/7028068/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1613460,
      "rating": 6,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Coroutines (AKA Stackless threads) in C.  :)  It's Evil trickery.</p>\n\n<pre><code>#define crBegin static int state=0; switch(state) { case 0:\n#define crReturn(i,x) do { state=i; return x; case i:; } while (0)\n#define crFinish }\nint function(void) {\n    static int i;\n    crBegin;\n    for (i = 0; i &lt; 10; i++)\n        crReturn(1, i);\n    crFinish;\n}\n\nint decompressor(void) {\n    static int c, len;\n    crBegin;\n    while (1) {\n        c = getchar();\n        if (c == EOF)\n            break;\n        if (c == 0xFF) {\n            len = getchar();\n            c = getchar();\n            while (len--)\n            crReturn(c);\n        } else\n        crReturn(c);\n    }\n    crReturn(EOF);\n    crFinish;\n}\n\n\nvoid parser(int c) {\n    crBegin;\n    while (1) {\n        /* first char already in c */\n        if (c == EOF)\n            break;\n        if (isalpha(c)) {\n            do {\n                add_to_token(c);\n        crReturn( );\n            } while (isalpha(c));\n            got_token(WORD);\n        }\n        add_to_token(c);\n        got_token(PUNCT);\n    crReturn( );\n    }\n    crFinish;\n}\n</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1613460/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-10-23 13:31:57Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1045563,
      "rating": 5,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>switch (device_id)\n{\n#ifndef PROD_1\n#ifndef PROD_2\n#ifdef PROD_3\n  case ID_1:\n#endif\n\n#ifdef PROD_4\n\n#ifdef PROD_5\n  case ID_2:\n  case ID_3:\n  case ID_4:\n#elif defined(PROD_4)\n#ifndef PROD_6\n  case ID_1:\n#endif // PROD_6\n  case ID_5:\n#endif\n\n  case ID_6:\n#endif\n\n#ifdef PROD_7\n  #ifndef PROD_8\n    case ID_7:\n  #endif\n#endif\n</code></pre>\n\n<p>(names changed to protect the not so innocent)</p>\n\n<p>Notice that we haven't even gotten to any code yet, this is just to get to the first actual bit of code.  This actually happens (in almost, but not exactly the same way) for several functions, each of which, in the end only have 4 possible variations (which are also mostly copy/paste with slight variations and #ifdefs of their own).</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1045563/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-06-25 18:42:48Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 7946157,
          "score": 0,
          "content": "That&#39;s just beautiful. And for what porpoise?",
          "date": "2011-07-15 18:29:13Z",
          "user": "luser droog",
          "user_link": "https://stackoverflow.com/users/733077/luser-droog",
          "reputation": 19414
        },
        {
          "id": 8129028,
          "score": 0,
          "content": "If only I could type just a smily here!",
          "date": "2011-07-27 03:32:50Z",
          "user": "luser droog",
          "user_link": "https://stackoverflow.com/users/733077/luser-droog",
          "reputation": 19414
        }
      ]
    },
    {
      "id": 1244684,
      "rating": 4,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define interface struct\n</code></pre>\n\n<p>in some of Optima++ headers (Optima++ is/was a Watcom/Powersoft IDE I had to work with).</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1244684/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-08-07 13:25:03Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1295397,
          "score": 1,
          "content": "One of the Windows header files also #defines interface to something.",
          "date": "2009-09-19 18:02:03Z",
          "user": "bk1e",
          "user_link": "https://stackoverflow.com/users/8090/bk1e",
          "reputation": 24288
        },
        {
          "id": 8105615,
          "score": 0,
          "content": "+1 This error caught me and one of my (much more knowledgeable) colleages tracked it down.",
          "date": "2011-07-25 21:43:30Z",
          "user": "John",
          "user_link": "https://stackoverflow.com/users/13895/john",
          "reputation": 16009
        }
      ]
    },
    {
      "id": 1444436,
      "rating": 4,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define FLASE FALSE\n</code></pre>\n\n<p>The programmer was a bad typist, and this was his most common mistake.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1444436/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-09-18 13:05:16Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1291826,
          "score": 0,
          "content": "I&#39;ve known developers to alias &quot;mroe&quot; (more) and such in the command line environment, but doing it in code takes the cake.",
          "date": "2009-09-18 17:12:31Z",
          "user": "Curt Nichols",
          "user_link": "https://stackoverflow.com/users/83202/curt-nichols",
          "reputation": 2767
        },
        {
          "id": 1457786,
          "score": 10,
          "content": "Hey, everoyne nakes miskates!",
          "date": "2009-10-20 11:13:02Z",
          "user": "Konamiman",
          "user_link": "https://stackoverflow.com/users/4574/konamiman",
          "reputation": 50143
        }
      ]
    },
    {
      "id": 3743734,
      "rating": 4,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Have to do this from memory, but was about like this:\nWorking with a lib for writing Symbian apps. Hidden in a header file you <em>needed</em> to include was this little gem:</p>\n\n<pre><code>// Here come the register defines:\n#define C &lt;something&gt;\n#define N &lt;something&gt;\n&lt;two more single letter defines&gt;\n</code></pre>\n\n<p>In our code the loading of a file with a hardcoded filename failed. When we changed the file location from C to D drive, it magically worked...</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/3743734/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2010-09-18 22:17:40Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1442801,
      "rating": 3,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define unless(cond) if(!cond)\n#define until(cond) while(!cond)\n</code></pre>\n\n<p>Used:</p>\n\n<pre><code>unless( ptr == NULL) \n    ptr-&gt;foo();\n</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1442801/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-09-18 06:00:29Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1290280,
          "score": 6,
          "content": "Not even safe: unless (a + b == c) does not do what you think!",
          "date": "2009-09-18 13:38:23Z",
          "user": "Jonathan Leffler",
          "user_link": "https://stackoverflow.com/users/15168/jonathan-leffler",
          "reputation": 749241
        },
        {
          "id": 1294442,
          "score": 6,
          "content": "Safer if changed to: #define unless(cond) if(!(cond)) #define until(cond) while(!(cond))",
          "date": "2009-09-19 09:18:55Z",
          "user": "Joel",
          "user_link": "https://stackoverflow.com/users/31092/joel",
          "reputation": 11811
        },
        {
          "id": 5290656,
          "score": 2,
          "content": "That&#39;s actually from Perl, so I can see what the author is getting at. Not evil actually (disregarding Jonathan&#39;s comment, which isn&#39;t difficult to fix), but quite readable (I can&#39;t say the same for the rest of the language)",
          "date": "2011-01-24 02:23:40Z",
          "user": "new123456",
          "user_link": "https://stackoverflow.com/users/144734/new123456",
          "reputation": 873
        }
      ]
    },
    {
      "id": 1793471,
      "rating": 3,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The worst I've seen is in my current project where there are a whole lot of cases of:</p>\n\n<pre><code>#if PROGRAMA\n     .\n     .\n    if(...)\n    {\n     .\n     .\n     .\n#else\n    .\n     .\n    if(...)\n    {\n     .\n     .\n     .\n#endif\n     }\n</code></pre>\n\n<p>Yeah, he closes 2 opens with a single close.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1793471/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-11-24 22:44:17Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 652853,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>When I first came across macros in C they had me stumped for days. Below is what I was faced with. I imagine it makes perfect sense to C experts and is super efficient however for me to try and work out what exactly was going on meant cutting and pasting all the different macros together until the whole function could be viewed. Surely that's not good practice?! What's wrong with using a plain old function?!</p>\n\n<pre><code>#define AST_LIST_MOVE_CURRENT(newhead, field) do { \\\ntypeof ((newhead)-&gt;first) __list_cur = __new_prev; \\\nAST_LIST_REMOVE_CURRENT(field); \\\nAST_LIST_INSERT_TAIL((newhead), __list_cur, field); \\\n} while (0) \n</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/652853/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 02:35:44Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 653033,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Related to Raymond's rant is the following horrible (in my opinion, of course) macro:</p>\n\n<pre><code>#define CALL_AND_CHECK(func, arg) \\\n    int result = func(arg);       \\\n    if(0 != result)               \\\n    {                             \\\n        sys.exit(-1);             \\\n    }                             \\\n</code></pre>\n\n<p>I was pretty new to the practice of using macros and used this macro, but I <em>expected</em> the function that I passed to it to fail. And I was doing it in a background thread, so it stumped me for days why my entire app was \"crashing\".</p>\n\n<p>As an aside, if only std::tr1::function was around when this macro was written, I would have a week of my life back!</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653033/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 04:34:37Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1482350,
          "score": 0,
          "content": "Bear in mind that using CALL_AND_CHECK() twice in one scope will result in multiply defining <code>result</code>, and even if it didn&#39;t <code>if (x) CALL_AND_CHECK(foo, y) else CALL_AND_CHECK(foo, z)</code> would have surprising results.",
          "date": "2009-10-23 20:32:59Z",
          "user": "David Thornley",
          "user_link": "https://stackoverflow.com/users/14148/david-thornley",
          "reputation": 56916
        }
      ]
    },
    {
      "id": 653026,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Good macros: (although personally I dislike the double parentheses required to use this syntax; I prefer either vararg macros (C99 only) or something like PRINTF_0, PRINTF_1, etc, depending on the number of arguments)</p>\n\n<pre><code>#ifdef DEBUG\n#define PRINTF(x) printf x\n#else\n#define PRINTF(x)\n#endif\n</code></pre>\n\n<p>Reduces code size / execution time (the first more than the second) for non-debug build; also prevents leaking debug text strings which may pose a smallish security risk</p>",
      "edited": "2009-03-17 10:14:26Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/653026/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466896,
          "score": 0,
          "content": "Corrected.  Escape the _&#39;s with \\.",
          "date": "2009-03-17 10:14:38Z",
          "user": "strager",
          "user_link": "https://stackoverflow.com/users/39992/strager",
          "reputation": 89794
        },
        {
          "id": 470285,
          "score": 0,
          "content": "I like #define D(s) do{s;}while(0) which is used as D(printf(...)); The extra parens make sense...",
          "date": "2009-03-18 02:32:15Z",
          "user": "RBerteig",
          "user_link": "https://stackoverflow.com/users/68204/rberteig",
          "reputation": 43016
        },
        {
          "id": 1288659,
          "score": 0,
          "content": "you can also define PRINTF as &quot;printf&quot; if debugging is on and as &quot;(void)&quot; if it is not. Then it works with any number of arguments, you get code like &quot;(void)(1,2,3,4)&quot; which does nothing.",
          "date": "2009-09-18 08:19:55Z",
          "user": "Marten",
          "user_link": "https://stackoverflow.com/users/125739/marten",
          "reputation": 1146
        },
        {
          "id": 1299103,
          "score": 0,
          "content": "@Marten: unless that is something like &quot;(void)(LookupDebugId(id), ConvertToString(id))&quot;, in which case  &quot;ConvertToString&quot; will still be called, just its return value is ignored, and &quot;LookupDebugId&quot; could be non-existent. If you are in Visual Studio land, you have __noop, which does what you want.",
          "date": "2009-09-20 22:07:16Z",
          "user": "Simon Buchan",
          "user_link": "https://stackoverflow.com/users/20135/simon-buchan",
          "reputation": 13175
        },
        {
          "id": 1482358,
          "score": 0,
          "content": "Also remember that printf(x) can have strange, and potentially catastrophic, results if there are any percent signs in x.",
          "date": "2009-10-23 20:34:26Z",
          "user": "David Thornley",
          "user_link": "https://stackoverflow.com/users/14148/david-thornley",
          "reputation": 56916
        }
      ]
    },
    {
      "id": 1250372,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Anything using sendmail and its magic configuration syntax</p>",
      "edited": "2009-08-09 01:55:34Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1250372/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1287820,
          "score": 0,
          "content": "Yea, that&#39;s pretty bad. m4&#39;s syntax isn&#39;t great. I once dug into it&#39;s docs thinking that I could use it for some other stuff, and found that the authors didn&#39;t include a looping construct because you could build one of your own using recursion. I didn&#39;t use m4 for anything after that.",
          "date": "2009-09-18 03:03:54Z",
          "user": "Michael Kohne",
          "user_link": "https://stackoverflow.com/users/5801/michael-kohne",
          "reputation": 11994
        }
      ]
    },
    {
      "id": 1307595,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I'm adding another one that has started to annoy me over time:</p>\n\n<pre><code>#define ARRAYSIZE(x) (sizeof(x)/sizeof((x)[0]))\n</code></pre>\n\n<p>And that's if they get it right; I've seen versions with all possible permutations of parenthesis present or not.  I've seen it defined twice in the same header file.</p>\n\n<p>Mainly my argument applies to Windows (though I assume other OS SDKs have something similar), where just about everyone seems to feel the need to define this macro in their project's header, and I don't understand why.  </p>\n\n<p>WinNT.h (which is included by Windows.h) defines a very nice version that does some template voodoo to cause <em>compile time</em> errors if you pass a pointer type instead of an array.  </p>\n\n<p>Of course it falls back to exactly what I wrote above if you are building a C program, but I would still not redefine something the SDK has by default for no reason.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1307595/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-08-20 17:11:14Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1439656,
          "score": 0,
          "content": "I&#39;ve found that <code>#define DIM(x) (sizeof x &#47; sizeof * x)</code> has saved me a lot of typing.",
          "date": "2009-10-16 14:22:54Z",
          "user": "Jamie",
          "user_link": "https://stackoverflow.com/users/32836/jamie",
          "reputation": 7311
        },
        {
          "id": 1440114,
          "score": 2,
          "content": "I don&#39;t have a problem with the idea, just use the one that comes with your SDK.  If you want to save typing, try #define DIM(x) ARRAYSIZE(x).",
          "date": "2009-10-16 15:23:43Z",
          "user": "i_am_jorf",
          "user_link": "https://stackoverflow.com/users/74815/i-am-jorf",
          "reputation": 54430
        },
        {
          "id": 3063964,
          "score": 0,
          "content": "Dragging in the whole of &lt;windows.h&gt; just for this macro seems somewhat excessive. You&#39;ll also be going out of your way to write unportable code.",
          "date": "2010-06-08 17:38:49Z",
          "user": "Chris Oldwood",
          "user_link": "https://stackoverflow.com/users/106119/chris-oldwood",
          "reputation": 1080
        },
        {
          "id": 3067675,
          "score": 1,
          "content": "If you&#39;re writing code on windows, you&#39;re already dragging in windows.h.  Unless you&#39;re writing small console apps and the like.  I mean, you can try to stick to just the crt functions, but eventually you&#39;ll want to do something you need win32 for.",
          "date": "2010-06-09 02:39:38Z",
          "user": "i_am_jorf",
          "user_link": "https://stackoverflow.com/users/74815/i-am-jorf",
          "reputation": 54430
        },
        {
          "id": 11229840,
          "score": 0,
          "content": "I just don&#39;t understand why you can&#39;t use a function instead. Plus, a function would be safer than the macro since it won&#39;t work with pointers.",
          "date": "2012-01-23 00:59:19Z",
          "user": "Paul Fultz II",
          "user_link": "https://stackoverflow.com/users/375343/paul-fultz-ii",
          "reputation": 18070
        }
      ]
    },
    {
      "id": 1244571,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I once put together this horrifying C++ code which used macros to help hook functions into the import table of DLLs.</p>\n\n<pre><code>\n#define ARGLIST(...) __VA_ARGS__\n\n#define CPPTYPELESSARG(typelessParams) thisptr, typelessParams\n#define CPPTYPEDARG(typedParams) void* thisptr, typedParams\n#define CPPTYPELESSNOARG thisptr\n#define CPPTYPEDNOARG void* thisptr\n\n#define CPPHOOKBODY(hookName, params) void *thisptr; \\\n    __asm { mov thisptr, ecx } \\\n    return On##hookName ( params );\n\n\n#define CHOOKBODY(hookName, typelessParams) return On##hookName( typelessParams );\n\n#define CPPHOOK(InjectHookRef, importLib, importFunc, hookName, returnType, typedParams, typelessParams) \\\n    HOOKIMPL(InjectHookRef, importLib, importFunc, hookName, returnType, CPPTYPEDARG(typedParams), typelessParams, \\\n    typedParams, __thiscall, __stdcall, CPPHOOKBODY(hookName, CPPTYPELESSARG(typelessParams)))\n\n#define CPPHOOKNOARG(InjectHookRef, importLib, importFunc, hookName, returnType, typedParams, typelessParams) \\\n    HOOKIMPL(InjectHookRef, importLib, importFunc, hookName, returnType, CPPTYPEDNOARG, typelessParams, \\\n    typedParams, __thiscall, __stdcall, CPPHOOKBODY(hookName, CPPTYPELESSNOARG))\n\n#define CDECLHOOK(InjectHookRef, importLib, importFunc, hookName, returnType, typedParams, typelessParams) \\\n    HOOKIMPL(InjectHookRef, importLib, importFunc, hookName, returnType, typedParams, typelessParams, \\\n    typedParams, __cdecl, __cdecl, CHOOKBODY(hookName, typelessParams))\n\n#define CDECLFUNC(name, address, returnType, args) \\\n    typedef returnType (__cdecl *name##Ptr)(args); \\\n    name##Ptr name = (name##Ptr) address;\n\n#define CPPFUNC(name, address, returnType, args) \\\n    typedef returnType (__thiscall *name##Ptr)(void* thisptr, args); \\\n    name##Ptr name = (name##Ptr) address;\n\n#define STDFUNC(name, address, returnType, args) \\\n    typedef returnType (__stdcall *name##Ptr)(args); \\\n    name##Ptr name = (name##Ptr) address;\n\n#define STDHOOK(InjectHookRef, importLib, importFunc, hookName, returnType, typedParams, typelessParams) \\\n    HOOKIMPL(InjectHookRef, importLib, importFunc, hookName, returnType, typedParams, typelessParams, \\\n    typedParams, __stdcall, __stdcall, CHOOKBODY(hookName, ARGLIST(typelessParams)))\n\n#define HOOKIMPL(InjectHookRef, importLib, importFunc, hookName, returnType, typedParams, typelessParams, hookParams, fnPtrCall, hookCall, hookBody) \\\n        typedef returnType (fnPtrCall *##hookName##OrigPtr )( typedParams ); \\\n        class hookName : public IHook \\\n        { \\\n        public: \\\n            typedef hookName##OrigPtr func_type; \\\n        private: \\\n            static void* m_origFunction; \\\n            static bool m_bModifyImport; \\\n            static std::string m_lib; \\\n            static std::string m_importFunc; \\\n            static std::string m_sHookName; \\\n            static returnType hookCall hookName##FnHook ( hookParams ) \\\n            { \\\n                hookBody \\\n            } \\\n            static bool ImplIsModifyImport() { return hookName::m_bModifyImport; } \\\n            static void ImplSetModifyImport(bool bModify) { hookName::m_bModifyImport = bModify; } \\\n            static const std::string& ImplGetLibName() { return hookName::m_lib; } \\\n            static const std::string& ImplGetImportFunctionName() { return hookName::m_importFunc; } \\\n            static void ImplSetOriginalAddress(void* fn) { hookName::m_origFunction = fn; } \\\n            static void* ImplGetOriginalAddress() { return hookName::m_origFunction; } \\\n            static returnType On##hookName ( typedParams ); \\\n            static void* ImplGetNewAddress() { return hookName::##hookName##FnHook; } \\\n            static const std::string& ImplGetHookName() { return hookName::m_sHookName; } \\\n        public: \\\n            hookName() \\\n            { \\\n                InjectHookRef.AddHook((IHook*)this); \\\n                hookName::m_lib = importLib; \\\n                hookName::m_importFunc = importFunc; \\\n                hookName::m_sHookName = #hookName; \\\n                hookName::m_origFunction = NULL; \\\n                hookName::m_bModifyImport = true; \\\n            } \\\n            virtual bool IsModifyImport() const { return hookName::ImplIsModifyImport(); } \\\n            virtual void SetModifyImport(bool bModify) { hookName::ImplSetModifyImport(bModify); } \\\n            virtual const std::string& GetHookName() const { return hookName::ImplGetHookName(); } \\\n            virtual const std::string& GetLibName() const { return hookName::ImplGetLibName(); } \\\n            virtual const std::string& GetImportFunctionName() const { return hookName::ImplGetImportFunctionName(); } \\\n            virtual void* GetOriginalAddress() const { return hookName::ImplGetOriginalAddress(); } \\\n            virtual void* GetNewAddress() const { return hookName::ImplGetNewAddress(); } \\\n            virtual void SetOriginalAddress(void* fn) { hookName::m_origFunction = fn; } \\\n            static func_type GetTypedOriginalAddress() { return reinterpret_cast(hookName::m_origFunction); } \\\n        }; \\\n        void* hookName::m_origFunction = NULL; \\\n        bool hookName::m_bModifyImport = false; \\\n        std::string hookName::m_lib; \\\n        std::string hookName::m_importFunc; \\\n        std::string hookName::m_sHookName; \\\n        static hookName g##hookName##Inst;\n</code></pre>\n\n<p>Which in turn allowed me to do this:</p>\n\n<p><code><pre>\nCPPHOOK(gIH, \"SimEngine.dll\", \"?AddEntity@Player@@UAEXPAVEntity@@@Z\", PlayerAddEntity, void, void* ent, ent);</p>\n\n<p>/* Called when the engine calls Player::AddEntity(entity) */\nvoid PlayerAddEntity::OnPlayerAddEntity(void *thisptr, void *ent)\n{\n    unsigned int id = getPlayerID(thisptr);</p>\n\n<pre><code>gIH.GetLog()-&gt;Info(\"Player %d adding entity %s.\", \n    getPlayerID(thisptr), getEntityName(ent));\n\ngPlayers[id] = thisptr;\n\n/*if( id == 2 &amp;&amp; gPlayers[1] &amp;&amp; gPlayers[2] )\n    EntitySetOwner::GetTypedOriginalAddress() (ent, gPlayers[1]);*/\n//gEnts[ent] = Entity(ent, Vector3f());\n\nPlayerAddEntity::GetTypedOriginalAddress() (thisptr, ent);\n</code></pre>\n\n<p>}\n</pre></code></p>",
      "edited": "2009-09-20 20:34:00Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1244571/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1613540,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define \"CR_LF\" '\\r'\n</code></pre>\n\n<p>That confused the hell out of me for a while!</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1613540/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-10-23 13:43:54Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 2559654,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>A past employer found there were no implementations of <a href=\"http://en.wikipedia.org/wiki/BASIC-PLUS\" rel=\"nofollow noreferrer\">BASIC-PLUS</a> on modern Unix systems, so they tried to re-implement it using C pre-processor macros:</p>\n\n<pre><code>#define IF if(\n#define THEN ) {\n#define ENDIF }\n#define GOTO goto L\n</code></pre>\n\n<p>...etc.  </p>\n\n<p>Horrific.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/2559654/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2010-04-01 10:21:42Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 3063996,
          "score": 0,
          "content": "I once worked on a codebase that was translated from Pascal into C which tried to keep the Pascal syntax using this approach.",
          "date": "2010-06-08 17:42:22Z",
          "user": "Chris Oldwood",
          "user_link": "https://stackoverflow.com/users/106119/chris-oldwood",
          "reputation": 1080
        }
      ]
    },
    {
      "id": 2588440,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>This is taken from a popular open source program. In fact it makes some parts of the code more readable by hiding the ugly legacy.</p>\n\n<pre><code>#define EP_STATUS    CASTLING][(BOARD_FILES-2)\n#define HOLDINGS_SET CASTLING][(BOARD_FILES-1)\n</code></pre>\n\n<p>I guess there is nothing really bad here, I just find it funny.</p>\n\n<p><a href=\"http://git.savannah.gnu.org/cgit/xboard.git/tree/common.h\" rel=\"nofollow noreferrer\">http://git.savannah.gnu.org/cgit/xboard.git/tree/common.h</a></p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/2588440/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2010-04-06 21:23:39Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 2588530,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>See <a href=\"https://stackoverflow.com/questions/2163402/tips-for-a-programmer-with-dyslexia/2163489#2163489\">this answer</a> re how a dyslexic colleague made life easier for themselves with a common header file full of things like <code>#define fasle false</code>.</p>",
      "edited": "2017-05-23 12:10:45Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/2588530/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 5457498,
      "rating": 2,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define PROCESS_AND_RETURN(X) \\\nX.process(); \\\n// Important: Return only after invoking virtual method process() \\\nreturn X\n</code></pre>\n\n<p>Due to \"Important\" comment, the macro never returns the object and CRASH!</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/5457498/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2011-03-28 10:14:06Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 652925,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Another piece of 'creative' use of the preprocessor, though it is more in the terminology employed than in the mechanics (which are incredibly mundane):</p>\n\n<pre><code>/***********************************************************************\n * OS2 and PCDOS share a lot of common codes.  However, sometimes\n * OS2 needs codes similar to those of UNIX.  NOTPCDOS is used in these\n * situations\n */\n\n#ifdef OS2\n#define PCDOS\n#define NOTPCDOS\n#else /* OS2 */\n#ifndef PCDOS\n#define NOTPCDOS\n#endif /* PCDOS */\n#endif /* OS2 */\n</code></pre>\n\n<p>Genuine code - I thought I'd removed it, but apparently not.  I must have done so out in some temporary branch and not gotten permission to check it back into the main code.  One more item for the 'to do' list.</p>",
      "edited": "2009-03-17 03:37:21Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/652925/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 653144,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Try to debug big project that really loves macros, \nand there is a lot of macros that calls other macros that calls other macros etc etc. \n(5-10 levels of macros was not that uncommon)</p>\n\n<p>And then top it up with a lot of #ifdef this macrot #else that macro, \nso if you follow the code it like a tree of different paths it can go.</p>\n\n<p>The only solution is most cases was to precompile and read that instead....</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653144/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 06:03:10Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1242353,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I agree that for the most part, macros are horrible to use, but i have found a few instances where they have been useful.</p>\n\n<p>This one is actually brilliant IMHO, as you can only get something similar with sprintf, which then requires resource allocations and whatnot, plus, all work is done entirely by the preprocessor</p>\n\n<pre><code>// Macro: Stringize\n//\n//      Converts the parameter into a string\n//\n#define Stringize( L )          #L\n\n\n// Macro: MakeString\n//\n//      Converts the contents of a macro into a string\n//\n#define MakeString( L )     Stringize(L)\n\n\n// Macro: $LINE\n//\n//      Gets the line number as a string\n//\n#define $LINE                   MakeString( __LINE__ )\n\n\n// Macro: $FILE_POS\n//\n//      Gets the current file name and current line number in a format the Visual Studio\n//      can interpret and output goto\n//\n// NOTE: For VS to properly interpret this, it must be at the start of the line (can only have whitespace before)\n//\n#define $FILE_POS               __FILE__ \"(\" $LINE \") : \"\n</code></pre>\n\n<p>The other that I loathe to use, but find it extremely useful is doing something like this, which basically allows me to quickly generate templates that have a variable number of template parameters</p>\n\n<pre><code>#define TEMPLATE_DEFS    typename ReturnType\n#define TEMPLATE_DECL   ReturnType\n#define FUNCTION_PARAMS void\n#define FUNCTION_PASS   \n#define GENERIC_CALLBACK_DECL_NAME      CallbackSafePointer0\n#include \"Callback.inl\"\n\n#define TEMPLATE_DEFS   typename ReturnType, typename P1\n#define TEMPLATE_DECL   ReturnType, P1\n#define FUNCTION_PARAMS P1 param1\n#define FUNCTION_PASS   param1\n#define GENERIC_CALLBACK_DECL_NAME      CallbackSafePointer1\n#include \"Callback.inl\"\n\n#define TEMPLATE_DEFS   typename ReturnType, typename P1, typename P2\n#define TEMPLATE_DECL   ReturnType, P1, P2\n#define FUNCTION_PARAMS P1 param1, P2 param2\n#define FUNCTION_PASS   param1, param2\n#define GENERIC_CALLBACK_DECL_NAME      CallbackSafePointer2\n#include \"Callback.inl\"\n\n#define TEMPLATE_DEFS   typename ReturnType, typename P1, typename P2, typename P3\n#define TEMPLATE_DECL   ReturnType, P1, P2, P3\n#define FUNCTION_PARAMS P1 param1, P2 param2, P3 param3\n#define FUNCTION_PASS   param1, param2, param3\n#define GENERIC_CALLBACK_DECL_NAME      CallbackSafePointer3\n#include \"Callback.inl\"\n\n// and so on...\n</code></pre>\n\n<p>Although this makes it kind of horrible to read \"Callback.inl\", it does completely eliminate rewriting the same code with a different number of arguments. I should also mention that \"Callback.inl\" #undefs all of the macros at the end of the file, hence, the macros themselves won't interfere with any other code, it just makes \"Callback.inl\" a little harder to write (reading and debuging isn't too hard though)</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1242353/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-08-07 00:56:26Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 653104,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The worst abuses (and I'm guilty of doing this occasionally) is using the preprocessor as some sort of data file replacement, ie:</p>\n\n<pre><code>#define FOO_RELATION \\  \nBAR_TUPLE( A, B, C) \\  \nBAR_TUPLE( X, Y, Z) \\ \n</code></pre>\n\n<p>and then somewhere else:</p>\n\n<pre><code>#define BAR_TUPLE( p1, p2, p3) if( p1 ) p2 = p3;\nFOO_RELATION\n#undef BAR_TUPLE\n</code></pre>\n\n<p>which will result in:</p>\n\n<pre><code>if( A ) B = C;\nif( X ) Y = Z;\n</code></pre>\n\n<p>This pattern can be used to do all sorts of (terrible) stuff... generate switch statements or huge if else blocks, or interface with \"real\" code. You could even use it to ::cough:: generate a context menu in a non-oo context menu system ::cough::. Not that I'd ever do anything so lame.</p>\n\n<p>Edit: fixed mismatched parenthesis and expanded example</p>",
      "edited": "2009-08-09 01:50:02Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/653104/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 467031,
          "score": 0,
          "content": "GCC actually uses that style internally.  Its useful in moderation, but should definitely be well documented.",
          "date": "2009-03-17 11:10:53Z",
          "user": "Jeff M",
          "user_link": "https://stackoverflow.com/users/49758/jeff-m",
          "reputation": 710
        },
        {
          "id": 1069266,
          "score": 0,
          "content": "Is the mismatched close parenthesis intentional?",
          "date": "2009-08-07 04:13:18Z",
          "user": "Jonathan Leffler",
          "user_link": "https://stackoverflow.com/users/15168/jonathan-leffler",
          "reputation": 749241
        }
      ]
    },
    {
      "id": 1442472,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>At the time it seemed like a good idea to \"pass\" a macro as an argument into another macro.   (I just couldn't stand the thought of defining a list of values in multiple places.)  The code here is contrived (and not very motivating), but gives you the idea:</p>\n\n<pre><code>#define ENUM_COLORS(CallbackMacro) \\\n    CallbackMacro(RED)   \\\n    CallbackMacro(GREEN) \\\n    CallbackMacro(BLUE)  \\\n    // ...\n\n#define DEFINE_COLOR_TYPE_CALLBACK(Color) \\\n    Color,\n\nenum MyColorType {\n    ENUM_COLORS(DEFINE_COLOR_TYPE_CALLBACK)\n};\n\nvoid RegisterAllKnownColors(void)\n{\n#define REGISTER_COLOR_CALLBACK(Color) \\\n    RegisterColor(Color, #Color);\n\n    ENUM_COLORS(REGISTER_COLOR_CALLBACK)\n}\n\nvoid RegisterColor(MyColorType Color, char *ColorName)\n{\n    // ...\n}\n</code></pre>",
      "edited": "2009-09-18 16:28:31Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1442472/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1290293,
          "score": 0,
          "content": "Missing backslashes on last two #define lines?",
          "date": "2009-09-18 13:39:33Z",
          "user": "Jonathan Leffler",
          "user_link": "https://stackoverflow.com/users/15168/jonathan-leffler",
          "reputation": 749241
        },
        {
          "id": 1291560,
          "score": 0,
          "content": "Yep.  Added in the missing backslashes.",
          "date": "2009-09-18 16:29:32Z",
          "user": "reuben",
          "user_link": "https://stackoverflow.com/users/41646/reuben",
          "reputation": 3370
        }
      ]
    },
    {
      "id": 653054,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Found in declarations, to much confusion: </p>\n\n<pre><code>NON_ZERO_BYTE         Fixed(8)  Constant('79'X),\n</code></pre>\n\n<p>Found later: </p>\n\n<pre><code>IF WORK_AREA(INDEX) = ZERO_BYTE THEN  /* found zero byte */ \n   WORK_AREA(INDEX) = NON_ZERO_BYTE ; /* reset to nonzero*/\n</code></pre>",
      "edited": "2009-09-20 20:31:54Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/653054/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1466409,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>It's not a C macro but...</p>\n\n<p>Many years ago I had the fun task of porting the original Transport Tycoon from the PC to the Mac. The PC version was written entirely in assembler so we had to go through the whole source code and port it to 'PC' C code first and then port that to the Mac. Most of the code was OK, even object orientated in places. However, the world rendering system was unbelievable. For anyone who's not played the game, the world can be viewed at one of three zoom levels. The code for this was something along the lines of:</p>\n\n<pre><code>macro DrawMacro &lt;list of arguments&gt;\n   a couple of thousand lines of assembler with loads of conditionals\n   based on the macro arguments\n\nDrawZoomLevel1:\n   DrawMacro &lt;list of magic numbers&gt;\n\nDrawZoomLevel2:\n   DrawMacro &lt;list of more magic numbers&gt;\n\nDrawZoomLevel3:\n   DrawMacro &lt;list of even more magic numbers&gt;\n</code></pre>\n\n<p>We must have been using a slightly older version of MASM as the macro would crash the assembler when we tried to assemble it.</p>\n\n<p>Skizz</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1466409/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-09-23 14:36:50Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 2184878,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The NFS code in BSD-kernels use goto between macros. It's still in use, and the code actually works. I know of several persons who have tried to clean it up, but all of them have given up after a while - it's just too messy.</p>\n\n<p>You can see it here:\n<a href=\"http://www.openbsd.org/cgi-bin/cvsweb/src/sys/nfs/nfsm_subs.h?rev=1.43\" rel=\"nofollow noreferrer\">http://www.openbsd.org/cgi-bin/cvsweb/src/sys/nfs/nfsm_subs.h?rev=1.43</a></p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/2184878/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2010-02-02 14:50:30Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 2429051,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I once saw a macro package that would alias every C keyword to let you effectively program in Klingon.  That's right, <em>Klingon</em>.  (Un)fortunately, the project was abandoned and taken down several years ago.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/2429051/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2010-03-11 22:08:59Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 5664193,
      "rating": 1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>The driver code for an ASIC I used about 10 years ago had a lot of sections that looked like:</p>\n\n<pre><code>int foo(state_t *state) {\n    int a, b, rval;\n\n    $\n    if (state-&gt;thing == whatever) {\n        $\n        do_whatever(state);\n    }\n    // more code\n\n    $\n    return rval;\n}\n</code></pre>\n\n<p>After a lot of head scratching we finally found the definition:</p>\n\n<pre><code>#if DEBUG\n#define $ dolog(\"%s %d\", __FILE__, __LINE__);\n#else\n#define $\n#endif\n</code></pre>\n\n<p>This was hard to find, because none of the source files that used it had <em>any</em> include files. There was a file called <code>top.c</code> source file that looked like:</p>\n\n<pre><code>#include &lt;namechanged.h&gt;\n#include &lt;foo.c&gt;\n#include &lt;bar.c&gt;\n#include &lt;baz.c&gt;\n</code></pre>\n\n<p>Sure enough, this was the only file referenced in the Makefile. Whenever you changed anything, you had to recompile <em>everything</em>. This was \"to make the code faster\".</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/5664193/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2011-04-14 13:43:17Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 662623,
      "rating": 0,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#define protected private\n</code></pre>\n\n<p>Seemed like a good idea sometimes, but if you need to, you should probably just string replace anyway.  Protected is fairly evil, allowing internal access to descendants isn't much better than just making the items public...</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/662623/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-19 15:22:26Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1045858,
      "rating": 0,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Any macro that uses the token concatenation operator <code>##</code>.</p>\n\n<p>I saw one that a colleague of mine had the pleasure of working with.  They tried to make a custom-implementation of string interning, so they re-implemented strings using a massive number of macros that (of course) didn't work properly.  Trying to figure out what it did made my eyes explode because of all the <code>##</code>'s scattered about.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1045858/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-06-25 19:48:11Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 1287814,
          "score": 0,
          "content": "I used ## a fair bit, but none of my macros are particularly complex - Just stuff to generate a simple getter or setter function.",
          "date": "2009-09-18 03:02:28Z",
          "user": "Michael Kohne",
          "user_link": "https://stackoverflow.com/users/5801/michael-kohne",
          "reputation": 11994
        }
      ]
    },
    {
      "id": 1069379,
      "rating": 0,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I have used header files as big macros:</p>\n\n<pre><code>// compile-time-caller.h\n#define param1 ...\n#define param2 ...\n#include \"killer-header.h\"\n\n// killer-header.h\n// uses param1 and param2\n</code></pre>\n\n<p>I have also created <em>recursive</em> header files.</p>\n\n<pre><code>// compile-time-caller.h\n#define param1 ...\n#define param2 ...\n#include \"killer-header.h\"\n\n// killer-header.h\"\n#if ... // conditional taking param1 and param2 as parameters\n#define temp1 param1\n#define temp2 param2\n#define param1 ... // expression taking temp1 and temp2 as parameters\n#define param2 ... // expression taking temp1 and temp2 as parameters\n#include \"killer-header.h\"\n// some actual code\n#else\n// more actual code\n#endif\n</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1069379/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-07-01 14:19:49Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1442407,
      "rating": 0,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I'm not fond of the Boost Preprocessor stuff. I attempted once to figure out how to use it (we had Boost in the project anyway...), but as near as I could tell, using it would make my error messages SO unreadable that it wasn't worth it.</p>\n\n<p>I liked the idea of the equivalent of looping macros, but it was just too much.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/1442407/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-09-18 03:05:30Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1445680,
      "rating": 0,
      "checkmark": true,
      "bounty": 0,
      "content": "<pre><code>#undef near\n#undef far\n</code></pre>\n\n<p>When I was new to game programming I was writing a frustum for a camera class is a game that I wrote, I had really strange errors in my code.</p>\n\n<p>It turns out that Microsoft had some #defines for near and far in windows.h which caused my _near and _far variables to error on the lines that contained them. It was very difficult to track the problem down because (I was a newbie at the time) and they only existed on four lines in the whole project so i didn't realise right away.</p>",
      "edited": "2009-09-18 16:52:10Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1445680/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 1594078,
      "rating": 0,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>I found it in libtidy,:</p>\n\n<pre><code> /* Internal symbols are prefixed to avoid clashes with other libraries */\n #define TYDYAPPEND(str1,str2) str1##str2\n #define TY_(str) TYDYAPPEND(prvTidy,str)\n\n TY_(DocParseStream)(bar,foo);\n</code></pre>\n\n<p>The problem is that visual studio 2005 and maybe other ide <code>go to definition</code> and <code>go to declaration</code> features only find the <code>#define TY_(...)</code> and not the desired <code>DocParseStream</code> declaration.</p>\n\n<p>Maybe it is safer this way.</p>\n\n<p>I think they should put a prefix for each function and not call a macro to do the job.. it's cluttering the code.. but maybe I am wrong about that.\nWhat do you think..?</p>\n\n<p>Ps: It seems that almost all the internal function const and others are prefixed using this.. My colleague just told me that it is usual.. wtf? Maybe I missed something.</p>",
      "edited": "2009-10-20 12:18:56Z",
      "editor": {
        "avatar": null,
        "name": "",
        "link": "https://stackoverflow.com/posts/1594078/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": []
    },
    {
      "id": 6049705,
      "rating": 0,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Be gentle, I wrote this as the only way I can think of to generically capture exceptions.  </p>\n\n<p>I use it to capture and stop exceptions from propagating out of my public interface functions...</p>\n\n<pre><code>/// Catch all generic exceptions and log appropriately.\n/// Logger is insulated from throwing, so this is a NO THROW operation.\n#define CatchAll( msg ) \\\n    catch( const Poco::Exception &amp;e )   \\\n    {   \\\n        try{ LogCritical( Logs.System(), std::string( e.displayText() ).append( msg ) );}catch(...){assert(0);} \\\n    }   \\\n    catch( const std::exception &amp;e )    \\\n    {   \\\n        try{LogCritical( Logs.System(), std::string( e.what() ).append( msg ) );}catch(...){assert(0);} \\\n    }   \\\n    catch(...)  \\\n    {   \\\n        try{ LogCritical( Logs.System(), std::string( \"Exception caught in \" __FUNCTION__ \". \" ).append( msg ) );}catch(...){assert(0);}    \\\n    }   \n</code></pre>\n\n<p>I dislike the complexity and I hate macros, but how else would you \"do\" a generic catch handler?  This isn't meant to be the end-all, this is just my generic catch handler to insulate legacy public functions and quickly add <em>at least some level</em> of protection when I know the function is getting invoked across a boundary which might throw up if a C++ exception were to be thrown (your welcome, JNI).</p>\n\n<p>So does it make you run and hide, or is it the only way to do something like this?</p>\n\n<p>Basically...</p>\n\n<pre><code>try{\n// some block of code capable of throwing\n}\nCatchAll()\n</code></pre>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/6049705/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2011-05-18 18:59:02Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 7020570,
          "score": 1,
          "content": "in java you would do a generic catch by doing catch on the Exception class. and that would catch everything. in your code, i&#39;m guessing that your exception are not all derived from std::exception?",
          "date": "2011-05-19 19:48:50Z",
          "user": "Trevor Boyd Smith",
          "user_link": "https://stackoverflow.com/users/52074/trevor-boyd-smith",
          "reputation": 19041
        }
      ]
    },
    {
      "id": 653025,
      "rating": -1,
      "checkmark": true,
      "bounty": 0,
      "content": "<p>Anything that uses the Token concatenation operator ##. \nI've seen this used to hack together psudo-template systems in C++ and other horrible things. The worst thing about using it is how impossibly cryptic your error messages become.</p>\n\n<p>I have seen one good use for it however. There was a macro\n    #MONITOR_COMPONENT(classname) \nthat generated classes at compile time that would inherit from a predefined monitor class and classname and that would autoregister with a singleton class that was used to monitor each component.</p>\n\n<p>Did it work? Yes, was it the nicest way of doing it.. probably not.</p>",
      "edited": "",
      "editor": {
        "avatar": null,
        "name": "community wiki",
        "link": "https://stackoverflow.com/posts/653025/revisions",
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "date": "2009-03-17 04:29:56Z",
      "author": {
        "avatar": null,
        "name": "",
        "link": null,
        "reputation": 0,
        "gbadge": 0,
        "sbadge": 0,
        "bbadge": 0
      },
      "comments": [
        {
          "id": 466549,
          "score": 0,
          "content": "The macro in this case to auto-register the class into a singleton is not that bad of an idea, see my first stackoverflow question as to why: <a href=\"http://stackoverflow.com/questions/77817/c-runtime-knowledge-of-classes\" title=\"c runtime knowledge of classes\">stackoverflow.com/questions/77817/&hellip;</a> .",
          "date": "2009-03-17 06:24:33Z",
          "user": "X-Istence",
          "user_link": "https://stackoverflow.com/users/13986/x-istence",
          "reputation": 16607
        },
        {
          "id": 466962,
          "score": 0,
          "content": "So I&#39;m guessing you are also anti assert()? (hint, its usually a macro that looks just like what you dislike) :)",
          "date": "2009-03-17 10:44:11Z",
          "user": "",
          "user_link": null,
          "reputation": 0
        },
        {
          "id": 520242,
          "score": 0,
          "content": "I did say in my second paragraph that this was a good use for the operator. I still don&#39;t think its the best possible solution to the problem.",
          "date": "2009-04-02 00:45:15Z",
          "user": "",
          "user_link": null,
          "reputation": 0
        }
      ]
    }
  ]
}
